C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF_24L01
OBJECT MODULE PLACED IN NRF_24L01.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE NRF_24L01.C ROM(COMPACT) OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "typedef.h"
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include "NRF_24L01.h"
   5          #include "UART.H"
   6          #include "delay.h"
   7          
   8          #define uchar unsigned char
   9          
  10          
  11          unsigned char const TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
  12          
  13          idata unsigned char rx_buf[TX_PLOAD_WIDTH];             //接收缓冲区长度为32个字节
  14          
  15          idata unsigned char tx_buf[TX_PLOAD_WIDTH];             //发送缓冲区长度为32个字节
  16          
  17          unsigned char flag;
  18          
  19          
  20          
  21          /**************************************************/
  22          
  23          //sbit LED1= P3^7;
  24          /**************************************************/
  25          unsigned char   bdata sta;
  26          
  27          sbit    RX_DR   =sta^6;
  28          
  29          sbit    TX_DS   =sta^5;
  30          
  31          sbit    MAX_RT  =sta^4;
  32          /**************************************************/
  33          
  34          /**************************************************
  35          Function: init_io();
  36          Description:
  37            flash led one time,chip enable(ready to TX or RX Mode),
  38            Spi disable,Spi clock line init high
  39          /**************************************************/
  40          #define KEY 0xaa
  41          void init_nrf24l01_io(void)
  42          {
  43   1              CE=0;                   // chip enable
  44   1              CSN=1;                  // Spi disable  
  45   1              SCK=0;                  // Spi clock line init high
  46   1      }
  47          /**************************************************
  48          Function: SPI_RW();
  49          
  50          Description:
  51            Writes one byte to nRF24L01, and return the byte read
  52            from nRF24L01 during write, according to SPI protocol
  53          /**************************************************/
  54          bdata unsigned char st=0;
  55          sbit st_1=st^0;
C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 2   

  56          sbit st_2=st^1;
  57          sbit st_3=st^2;
  58          sbit st_4=st^3;
  59          sbit st_5=st^4;
  60          sbit st_6=st^5;
  61          sbit st_7=st^6;
  62          sbit st_8=st^7;
  63          bdata unsigned char st1=0;
  64          sbit st_11=st1^0;
  65          sbit st_12=st1^1;
  66          sbit st_13=st1^2;
  67          sbit st_14=st1^3;
  68          sbit st_15=st1^4;
  69          sbit st_16=st1^5;
  70          sbit st_17=st1^6;
  71          sbit st_18=st1^7;
  72          /*
  73          uchar SPI_RW(uchar byte)
  74          {
  75                  uchar bit_ctr;
  76                  for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
  77                  {
  78                          MOSI = (byte & 0x80);         // output 'byte', MSB to MOSI
  79                          byte = (byte << 1);           // shift next bit into MSB..
  80                          SCK = 1;                      // Set SCK high..
  81                          MISO=1;
  82                          byte |= MISO;                     // capture current MISO bit
  83                          SCK = 0;                          // ..then set SCK low again
  84                  }
  85              return(byte);                         // return read byte
  86          }
  87          */
  88          
  89          uchar SPI_RW(uchar byte)
  90          {
  91   1              //uchar bit_ctr;
  92   1      
  93   1          st=byte;
  94   1      
  95   1          MOSI=st_8;
  96   1          SCK = 1;
  97   1          st_18=MISO;
  98   1          SCK = 0;
  99   1      
 100   1          MOSI=st_7;
 101   1          SCK = 1;
 102   1          st_17=MISO;
 103   1          SCK = 0;
 104   1      
 105   1          MOSI=st_6;
 106   1          SCK = 1;
 107   1          st_16=MISO;
 108   1          SCK = 0;
 109   1      
 110   1          MOSI=st_5;
 111   1          SCK = 1;
 112   1          st_15=MISO;
 113   1          SCK = 0;
 114   1      
 115   1          MOSI=st_4;
 116   1          SCK = 1;
 117   1          st_14=MISO;
C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 3   

 118   1          SCK = 0;
 119   1      
 120   1          MOSI=st_3;
 121   1          SCK = 1;
 122   1          st_13=MISO;
 123   1          SCK = 0;
 124   1      
 125   1          MOSI=st_2;
 126   1          SCK = 1;
 127   1          st_12=MISO;
 128   1          SCK = 0;
 129   1      
 130   1          MOSI=st_1;
 131   1          SCK = 1;
 132   1          st_11=MISO;
 133   1          SCK = 0;
 134   1          return(st1);                          // return read byte
 135   1      }
 136          /**************************************************/
 137          
 138          /**************************************************
 139          Function: SPI_RW_Reg();
 140          
 141          Description:
 142            Writes value 'value' to register 'reg'
 143          /**************************************************/
 144          uchar SPI_RW_Reg(BYTE reg, BYTE value)
 145          {
 146   1              uchar status;
 147   1              CSN = 0;                   // CSN low, init SPI transaction
 148   1              status = SPI_RW(reg);      // select register
 149   1              SPI_RW(value);             // ..and write value to it..
 150   1              CSN = 1;                   // CSN high again
 151   1              return(status);            // return nRF24L01 status byte
 152   1      }
 153          /**************************************************/
 154          
 155          /**************************************************
 156          Function: SPI_Read();
 157          
 158          Description:
 159            Read one byte from nRF24L01 register, 'reg'
 160          /**************************************************/
 161          BYTE SPI_Read(BYTE reg)
 162          {
 163   1              BYTE reg_val;
 164   1      
 165   1              CSN = 0;                // CSN low, initialize SPI communication...
 166   1              SPI_RW(reg);            // Select register to read from..
 167   1              reg_val = SPI_RW(0);    // ..then read registervalue
 168   1              CSN = 1;                // CSN high, terminate SPI communication
 169   1      
 170   1              return(reg_val);        // return register value
 171   1      }
 172          /**************************************************/
 173          
 174          /**************************************************
 175          Function: SPI_Read_Buf();
 176          
 177          Description:
 178            Reads 'bytes' #of bytes from register 'reg'
 179            Typically used to read RX payload, Rx/Tx address
C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 4   

 180          /**************************************************/
 181          uchar SPI_Read_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 182          {
 183   1              uchar status,byte_ctr;
 184   1      
 185   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 186   1              status = SPI_RW(reg);                   // Select register to write to and read status byte
 187   1      
 188   1              for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
 189   1      
 190   1              pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read byte from nRF24L01
 191   1      
 192   1              CSN = 1;                           // Set CSN high again
 193   1      
 194   1              return(status);                    // return nRF24L01 status byte
 195   1      }
 196          /**************************************************/
 197          
 198          /**************************************************
 199          Function: SPI_Write_Buf();
 200          
 201          Description:
 202            Writes contents of buffer '*pBuf' to nRF24L01
 203            Typically used to write TX payload, Rx/Tx address
 204          /**************************************************/
 205          uchar SPI_Write_Buf(BYTE reg, BYTE *pBuf, BYTE bytes)
 206          {
 207   1              uchar status,byte_ctr;
 208   1      
 209   1              CSN = 0;                   // Set CSN low, init SPI tranaction
 210   1              status = SPI_RW(reg);    // Select register to write to and read status byte
 211   1              for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
 212   1              SPI_RW(*pBuf++);
 213   1              CSN = 1;                 // Set CSN high again
 214   1              return(status);          // return nRF24L01 status byte
 215   1      }
 216          /**************************************************/
 217          
 218          /**************************************************
 219          Function: RX_Mode();
 220          
 221          Description:
 222            This function initializes one nRF24L01 device to
 223            RX Mode, set RX address, writes RX payload width,
 224            select RF channel, datarate & LNA HCURR.
 225            After init, CE is toggled high, which means that
 226            this device is now ready to receive a datapacket.
 227          /**************************************************/
 228          void power_off()
 229          {
 230   1          CE=0;
 231   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0D); 
 232   1          CE=1;
 233   1          _delay_us(20);
 234   1      }
 235          void ifnnrf_rx_mode(void)
 236          {
 237   1          power_off();
 238   1              CE=0;
 239   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX devi
             -ce as the TX device
 240   1      
C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 5   

 241   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 242   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 243   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 244   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
 245   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x26);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 246   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabl
             -ed..
 247   1      
 248   1              CE = 1; // Set CE pin high to enable RX device
 249   1      
 250   1        //  This device is now ready to receive one packet of 16 bytes payload from a TX device sending to addre
             -ss
 251   1        //  '3443101001', with auto acknowledgment, retransmit count of 10, RF channel 40 and datarate = 2Mbps.
 252   1      
 253   1      }
 254          /**************************************************/
 255          
 256          /**************************************************
 257          Function: TX_Mode();
 258          
 259          Description:
 260            This function initializes one nRF24L01 device to
 261            TX mode, set TX address, set RX address for auto.ack,
 262            fill TX payload, select RF channel, datarate & TX pwr.
 263            PWR_UP is set, CRC(2 bytes) is enabled, & PRIM:TX.
 264          
 265            ToDo: One high pulse(>10us) on CE will now send this
 266            packet and expext an acknowledgment from the RX device.
 267          /**************************************************/
 268          void ifnnrf_tx_mode(void)
 269          {
 270   1          power_off();
 271   1      
 272   1              CE=0;
 273   1              
 274   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 275   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ac
             -k
 276   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); // Writes data to TX payload
 277   1      
 278   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 279   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 280   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
 281   1              SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 282   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x26);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 283   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX
             -_DS enabled..
 284   1              
 285   1              CE=1;
 286   1      
 287   1      }
 288          
 289          void SPI_CLR_Reg(BYTE R_T)
 290          {
 291   1              CSN = 0; 
 292   1              if(R_T==1)                  // CSN low, init SPI transaction
 293   1              SPI_RW(FLUSH_TX);             // ..and write value to it..
 294   1              else
 295   1              SPI_RW(FLUSH_RX);             // ..and write value to it..
 296   1              CSN = 1;                   // CSN high again
 297   1      }
 298          
C51 COMPILER V9.00   NRF_24L01                                                             09/24/2013 17:41:15 PAGE 6   

 299          void ifnnrf_CLERN_ALL()
 300          {
 301   1        SPI_CLR_Reg(0);
 302   1        SPI_CLR_Reg(1);
 303   1        SPI_RW_Reg(WRITE_REG+STATUS,0xff);
 304   1        IRQ=1;
 305   1      }
 306          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      10
   IDATA SIZE       =     64    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
