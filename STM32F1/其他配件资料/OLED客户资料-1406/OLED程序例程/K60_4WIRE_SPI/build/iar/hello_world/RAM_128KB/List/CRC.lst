###############################################################################
#                                                                             #
#                                                       07/May/2014  16:38:55 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\drivers\uart\CRC.c                            #
#    Command line =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\drivers\uart\CRC.c -D IAR -D TWR_K60N512      #
#                    -lCN C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\RAM_128KB\List\ -lB    #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\ -o          #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\ --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.0           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\projects\hello #
#                    _world\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kin #
#                    etisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\com #
#                    mon\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\headers #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\a #
#                    dc16\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kinet #
#                    isK60_Demo_OLED\build\iar\hello_world\..\..\..\src\drive #
#                    rs\enet\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Ki #
#                    netisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\dr #
#                    ivers\pmc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\ #
#                    KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\ #
#                    drivers\rtc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³ #
#                    Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\sr #
#                    c\drivers\lptmr\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐ #
#                    òÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\. #
#                    .\src\drivers\uart\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\ #
#                    ³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\. #
#                    .\..\src\drivers\mcg\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁ #
#                    Ï\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\.. #
#                    \..\..\src\drivers\wdog\ -I                              #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\platforms\ -I  #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\drivers\ftm\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\SPI #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\O #
#                    LED\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\ -On             #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\CRC.lst      #
#    Object file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\CRC.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\src\drivers\uart\CRC.c
      1          #include  "CRC.H"
      2          
      3          
      4          //CRCÊ¹ÓÃ
      5           typedef struct                
      6             {                             
      7          	 unsigned char	 L;             
      8          	 unsigned char	 H;              
      9             } INT_08BIT_2;  
     10          
     11           typedef union                  
     12            {	                            
     13              unsigned short     int  Int16Bit;       
     14          	INT_08BIT_2  Int08Bit;       
     15            } INT_16BIT_08BIT; 
     16          
     17          
     18          

   \                                 In section .rodata, align 4
     19          unsigned short     int const CRC_Tab[] =  {
   \                     CRC_Tab:
   \   00000000   0x0000 0x1021      DC16 0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161
   \              0x2042 0x3063
   \              0x4084 0x50A5
   \              0x60C6 0x70E7
   \              0x8108 0x9129
   \   00000014   0xA14A 0xB16B      DC16 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786
   \              0xC18C 0xD1AD
   \              0xE1CE 0xF1EF
   \              0x1231 0x0210
   \              0x3273 0x2252
   \   00000028   0x52B5 0x4294      DC16 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205
   \              0x72F7 0x62D6
   \              0x9339 0x8318
   \              0xB37B 0xA35A
   \              0xD3BD       
   \   0000003A   0xC39C 0xF3FF      DC16 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572
   \              0xE3DE 0x2462
   \              0x3443 0x0420
   \              0x1401 0x64E6
   \              0x74C7 0x44A4
   \   0000004E   0x5485 0xA56A      DC16 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669
   \              0xB54B 0x8528
   \              0x9509 0xE5EE
   \              0xF5CF 0xC5AC
   \              0xD58D       
   \   00000060   0x3653 0x2672      DC16 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874
   \              0x1611 0x0630
   \              0x76D7 0x66F6
   \              0x5695 0x46B4
   \              0xB75B 0xA77A
   \   00000074   0x9719 0x8738      DC16 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758
   \              0xF7DF 0xE7FE
   \              0xD79D 0xC7BC
   \              0x48C4 0x58E5
   \              0x6886       
   \   00000086   0x78A7 0x0840      DC16 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144
   \              0x1861 0x2802
   \              0x3823 0xC9CC
   \              0xD9ED 0xE98E
   \              0xF9AF 0x8948
   \   0000009A   0x9969 0xA90A      DC16 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899
   \              0xB92B 0x5AF5
   \              0x4AD4 0x7AB7
   \              0x6A96 0x1A71
   \              0x0A50 0x3A33
   \   000000AE   0x2A12 0xDBFD      DC16 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802
   \              0xCBDC 0xFBBF
   \              0xEB9E 0x9B79
   \              0x8B58 0xBB3B
   \              0xAB1A       
   \   000000C0   0x6CA6 0x7C87      DC16 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911
   \              0x4CE4 0x5CC5
   \              0x2C22 0x3C03
   \              0x0C60 0x1C41
   \              0xEDAE 0xFD8F
   \   000000D4   0xCDEC 0xDDCD      DC16 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277
   \              0xAD2A 0xBD0B
   \              0x8D68 0x9D49
   \              0x7E97 0x6EB6
   \              0x5ED5       
   \   000000E6   0x4EF4 0x3E13      DC16 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923
   \              0x2E32 0x1E51
   \              0x0E70 0xFF9F
   \              0xEFBE 0xDFDD
   \              0xCFFC 0xBF1B
   \   000000FA   0xAF3A 0x9F59      DC16 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453
   \              0x8F78 0x9188
   \              0x81A9 0xB1CA
   \              0xA1EB 0xD10C
   \              0xC12D       
   \   0000010C   0xF14E 0xE16F      DC16 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679
   \              0x1080 0x00A1
   \              0x30C2 0x20E3
   \              0x5004 0x4025
   \              0x7046 0x6067
   \   00000120   0x83B9 0x9398      DC16 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752
   \              0xA3FB 0xB3DA
   \              0xC33D 0xD31C
   \              0xE37F 0xF35E
   \              0x02B1 0x1290
   \   00000134   0x22F3 0x32D2      DC16 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312
   \              0x4235 0x5214
   \              0x6277 0x7256
   \              0xB5EA 0xA5CB
   \              0x95A8       
   \   00000146   0x8589 0xF56E      DC16 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798
   \              0xE54F 0xD52C
   \              0xC50D 0x34E2
   \              0x24C3 0x14A0
   \              0x0481 0x7466
   \   0000015A   0x6447 0x5424      DC16 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358
   \              0x4405 0xA7DB
   \              0xB7FA 0x8799
   \              0x97B8 0xE75F
   \              0xF77E       
   \   0000016C   0xC71D 0xD73C      DC16 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068
   \              0x26D3 0x36F2
   \              0x0691 0x16B0
   \              0x6657 0x7676
   \              0x4615 0x5634
   \   00000180   0xD94C 0xC96D      DC16 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596
   \              0xF90E 0xE92F
   \              0x99C8 0x89E9
   \              0xB98A 0xA9AB
   \              0x5844       
   \   00000192   0x4865 0x7806      DC16 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223
   \              0x6827 0x18C0
   \              0x08E1 0x3882
   \              0x28A3 0xCB7D
   \              0xDB5C 0xEB3F
   \   000001A6   0xFB1E 0x8BF9      DC16 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254
   \              0x9BD8 0xABBB
   \              0xBB9A 0x4A75
   \              0x5A54 0x6A37
   \              0x7A16       
   \   000001B8   0x0AF1 0x1AD0      DC16 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427
   \              0x2AB3 0x3A92
   \              0xFD2E 0xED0F
   \              0xDD6C 0xCD4D
   \              0xBDAA 0xAD8B
   \   000001CC   0x9DE8 0x8DC9      DC16 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265
   \              0x7C26 0x6C07
   \              0x5C64 0x4C45
   \              0x3CA2 0x2C83
   \              0x1CE0 0x0CC1
   \   000001E0   0xEF1F 0xFF3E      DC16 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183
   \              0xCF5D 0xDF7C
   \              0xAF9B 0xBFBA
   \              0x8FD9 0x9FF8
   \              0x6E17       
   \   000001F2   0x7E36 0x4E55      DC16 32310, 20053, 24180, 11923, 16050, 3793, 7920
   \              0x5E74 0x2E93
   \              0x3EB2 0x0ED1
   \              0x1EF0       
     20          //CRCTB1: ;?256??
     21          	0x00000,0x01021,0x02042,0x03063,
     22          	0x04084,0x050a5,0x060c6,0x070e7,
     23          	0x08108,0x09129,0x0a14a,0x0b16b,
     24          	0x0c18c,0x0d1ad,0x0e1ce,0x0f1ef,
     25          	0x01231,0x00210,0x03273,0x02252,
     26          	0x052b5,0x04294,0x072f7,0x062d6,
     27          	0x09339,0x08318,0x0b37b,0x0a35a,
     28          	0x0d3bd,0x0c39c,0x0f3ff,0x0e3de,
     29          	0x02462,0x03443,0x00420,0x01401,
     30          	0x064e6,0x074c7,0x044a4,0x05485,
     31          	0x0a56a,0x0b54b,0x08528,0x09509,
     32          	0x0e5ee,0x0f5cf,0x0c5ac,0x0d58d,
     33          	0x03653,0x02672,0x01611,0x00630,
     34          	0x076d7,0x066f6,0x05695,0x046b4,
     35          	0x0b75b,0x0a77a,0x09719,0x08738,
     36          	0x0f7df,0x0e7fe,0x0d79d,0x0c7bc,
     37          	0x048c4,0x058e5,0x06886,0x078a7,
     38          	0x00840,0x01861,0x02802,0x03823,
     39          	0x0c9cc,0x0d9ed,0x0e98e,0x0f9af,
     40          	0x08948,0x09969,0x0a90a,0x0b92b,
     41          	0x05af5,0x04ad4,0x07ab7,0x06a96,
     42          	0x01a71,0x00a50,0x03a33,0x02a12,
     43          	0x0dbfd,0x0cbdc,0x0fbbf,0x0eb9e,
     44          	0x09b79,0x08b58,0x0bb3b,0x0ab1a,
     45          	0x06ca6,0x07c87,0x04ce4,0x05cc5,
     46          	0x02c22,0x03c03,0x00c60,0x01c41,
     47          	0x0edae,0x0fd8f,0x0cdec,0x0ddcd,
     48          	0x0ad2a,0x0bd0b,0x08d68,0x09d49,
     49          	0x07e97,0x06eb6,0x05ed5,0x04ef4,
     50          	0x03e13,0x02e32,0x01e51,0x00e70,
     51          	0x0ff9f,0x0efbe,0x0dfdd,0x0cffc,
     52          	0x0bf1b,0x0af3a,0x09f59,0x08f78,
     53          //CRCTB2: ;?256??
     54          	0x09188,0x081a9,0x0b1ca,0x0a1eb,
     55          	0x0d10c,0x0c12d,0x0f14e,0x0e16f,
     56          	0x01080,0x000a1,0x030c2,0x020e3,
     57          	0x05004,0x04025,0x07046,0x06067,
     58          	0x083b9,0x09398,0x0a3fb,0x0b3da,
     59          	0x0c33d,0x0d31c,0x0e37f,0x0f35e,
     60          	0x002b1,0x01290,0x022f3,0x032d2,
     61          	0x04235,0x05214,0x06277,0x07256,
     62          	0x0b5ea,0x0a5cb,0x095a8,0x08589,
     63          	0x0f56e,0x0e54f,0x0d52c,0x0c50d,
     64          	0x034e2,0x024c3,0x014a0,0x00481,
     65          	0x07466,0x06447,0x05424,0x04405,
     66          	0x0a7db,0x0b7fa,0x08799,0x097b8,
     67          	0x0e75f,0x0f77e,0x0c71d,0x0d73c,
     68          	0x026d3,0x036f2,0x00691,0x016b0,
     69          	0x06657,0x07676,0x04615,0x05634,
     70          	0x0d94c,0x0c96d,0x0f90e,0x0e92f,
     71          	0x099c8,0x089e9,0x0b98a,0x0a9ab,
     72          	0x05844,0x04865,0x07806,0x06827,
     73          	0x018c0,0x008e1,0x03882,0x028a3,
     74          	0x0cb7d,0x0db5c,0x0eb3f,0x0fb1e,
     75          	0x08bf9,0x09bd8,0x0abbb,0x0bb9a,
     76          	0x04a75,0x05a54,0x06a37,0x07a16,
     77          	0x00af1,0x01ad0,0x02ab3,0x03a92,
     78          	0x0fd2e,0x0ed0f,0x0dd6c,0x0cd4d,
     79          	0x0bdaa,0x0ad8b,0x09de8,0x08dc9,
     80          	0x07c26,0x06c07,0x05c64,0x04c45,
     81          	0x03ca2,0x02c83,0x01ce0,0x00cc1,
     82          	0x0ef1f,0x0ff3e,0x0cf5d,0x0df7c,
     83          	0x0af9b,0x0bfba,0x08fd9,0x09ff8,
     84          	0x06e17,0x07e36,0x04e55,0x05e74,
     85          	0x02e93,0x03eb2,0x00ed1,0x01ef0
     86                                         };
     87          
     88          
     89          /*
     90          **************************************************************************************************************
     91          *										      CRC Ð£ Ñé
     92          * Ãè Êö:  Ð£ÑéÒ»´®charÊý¾ÝµÄCRC
     93          *
     94          * Êä Èë:  CPU_CHAR   *str  		- ÒªÐ£ÑéÊý¾ÝµÄÖ¸Õë
     95          *         CPU_INT16U size		- ÒªÐ£ÑéÊý¾ÝµÄ³¤¶È
     96          *		  CPU_INT08U mode		- Ð£ÑéµÄÄ£Ê½
     97          *						         1:  Îª¸Ã´®Êý¾ÝÔö¼ÓCRCÐ£Ñé  Í¬Ê±·µ»ØÐ£ÑéµÄCRCÖµ
     98          *							     0:  ¸Ã´®Êý¾ÝÊÇ·ñÍ¨¹ýÐ£Ñé	·µ»ØÐ£ÑéµÄCRCÖµ
     99          * ·µ »Ø:
    100          *
    101          * ×¢ Òâ:
    102          *
    103          **************************************************************************************************************
    104          */

   \                                 In section .text, align 2, keep-with-next
    105           unsigned short     int AH_CRC_Verify( unsigned char *str, unsigned short     int size, unsigned char mode )
    106            {          
   \                     AH_CRC_Verify:
   \   00000000   0xB43C             PUSH     {R2-R5}
   \   00000002   0x0003             MOVS     R3,R0
    107              unsigned int       i;
    108          	INT_16BIT_08BIT	 crc;
    109          	INT_16BIT_08BIT	 y;
    110          
    111          	crc.Int16Bit = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    112          
    113          	for( i = 0 ; i < size ; i++ )
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0004             MOVS     R4,R0
   \                     ??AH_CRC_Verify_0:
   \   0000000E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000010   0x428C             CMP      R4,R1
   \   00000012   0xD215             BCS.N    ??AH_CRC_Verify_1
    114          	 {
    115          		y.Int16Bit    = CRC_Tab[ str[ i ] ^ crc.Int08Bit.H ];
   \   00000014   0x5CE0             LDRB     R0,[R4, R3]
   \   00000016   0xF89D 0x5005      LDRB     R5,[SP, #+5]
   \   0000001A   0x4068             EORS     R0,R5,R0
   \   0000001C   0x....             LDR.N    R5,??DataTable1
   \   0000001E   0xF835 0x0010      LDRH     R0,[R5, R0, LSL #+1]
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    116          		y.Int08Bit.H ^= crc.Int08Bit.L;
   \   00000026   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000002A   0xF89D 0x5004      LDRB     R5,[SP, #+4]
   \   0000002E   0x4068             EORS     R0,R5,R0
   \   00000030   0xF88D 0x0001      STRB     R0,[SP, #+1]
    117          		crc.Int16Bit  = y.Int16Bit;
   \   00000034   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000038   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    118          	 }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0xE7E6             B.N      ??AH_CRC_Verify_0
    119          	if( mode == 1 )
   \                     ??AH_CRC_Verify_1:
   \   00000040   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000042   0x2A01             CMP      R2,#+1
   \   00000044   0xD106             BNE.N    ??AH_CRC_Verify_2
    120          	 {
    121          		str[ i++ ] = y.Int08Bit.H ;
   \   00000046   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000004A   0x54E0             STRB     R0,[R4, R3]
   \   0000004C   0x1C64             ADDS     R4,R4,#+1
    122          		str[ i ]   = y.Int08Bit.L ;
   \   0000004E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000052   0x54E0             STRB     R0,[R4, R3]
    123          	 }
    124          
    125          	return( crc.Int16Bit );
   \                     ??AH_CRC_Verify_2:
   \   00000054   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000058   0xBC36             POP      {R1,R2,R4,R5}
   \   0000005A   0x4770             BX       LR               ;; return
    126            } 
    127          
    128          
    129          
    130          
    131          /*
    132          ****************************************************
    133          *		Êý ¾Ý È«0 È«F ÅÐ ¶Ï
    134          *
    135          * Ãè Êö:  ¶ÔÒ»´®Êý¾Ý½øÐÐÈ«0È«FÅÐ¶Ï£¬Ö÷ÒªÊÇ½øÐÐFLASHÐ£ÑéÊ¹ÓÃ¡£
    136          *
    137          * Êä Èë:  CPU_CHAR   *str  		- ÒªÐ£ÑéÊý¾ÝµÄÖ¸Õë
    138          *         CPU_INT32U size		- ÒªÐ£ÑéÊý¾ÝµÄ³¤¶È
    139          *
    140          * ·µ »Ø:  0x00  Êý¾ÝÎªÈ«0
    141          *         0xFF  Êý¾ÝÎªÈ«F
    142          *         0x01  Êý¾Ý·Ç0
    143          *
    144          ****************************************************
    145          */

   \                                 In section .text, align 2, keep-with-next
    146          unsigned int AH_Full_0F_Verify( unsigned char *str, unsigned int size )
    147            {
   \                     AH_Full_0F_Verify:
   \   00000000   0x0002             MOVS     R2,R0
    148              unsigned int i;
    149          
    150              for( i = 0; i < size; i++ )
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x0003             MOVS     R3,R0
   \                     ??AH_Full_0F_Verify_0:
   \   00000006   0x428B             CMP      R3,R1
   \   00000008   0xD204             BCS.N    ??AH_Full_0F_Verify_1
    151               {                                                 /* È«0ÅÐ¶Ï          (1)                               */
    152                 if( str[i] != 0x00 )                       
   \   0000000A   0x5C98             LDRB     R0,[R3, R2]
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD101             BNE.N    ??AH_Full_0F_Verify_1
    153                  { break; }
    154               }
   \                     ??AH_Full_0F_Verify_2:
   \   00000010   0x1C5B             ADDS     R3,R3,#+1
   \   00000012   0xE7F8             B.N      ??AH_Full_0F_Verify_0
    155              if( i == size )                                    /* Êý¾ÝÎªÈ«0                                          */
   \                     ??AH_Full_0F_Verify_1:
   \   00000014   0x428B             CMP      R3,R1
   \   00000016   0xD101             BNE.N    ??AH_Full_0F_Verify_3
    156               { return 0x00; } 
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE00D             B.N      ??AH_Full_0F_Verify_4
    157              for( i = 0; i < size; i++ )
   \                     ??AH_Full_0F_Verify_3:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x0003             MOVS     R3,R0
   \                     ??AH_Full_0F_Verify_5:
   \   00000020   0x428B             CMP      R3,R1
   \   00000022   0xD204             BCS.N    ??AH_Full_0F_Verify_6
    158               {                                                 /* È«FÅÐ¶Ï          (2)                               */
    159                 if( str[i] != 0xFF )                       
   \   00000024   0x5C98             LDRB     R0,[R3, R2]
   \   00000026   0x28FF             CMP      R0,#+255
   \   00000028   0xD101             BNE.N    ??AH_Full_0F_Verify_6
    160                  { break; }
    161               }
   \                     ??AH_Full_0F_Verify_7:
   \   0000002A   0x1C5B             ADDS     R3,R3,#+1
   \   0000002C   0xE7F8             B.N      ??AH_Full_0F_Verify_5
    162              if( i == size )                                    /* Êý¾ÝÎªÈ«F                                          */
   \                     ??AH_Full_0F_Verify_6:
   \   0000002E   0x428B             CMP      R3,R1
   \   00000030   0xD101             BNE.N    ??AH_Full_0F_Verify_8
    163               { return 0xFF; } 
   \   00000032   0x20FF             MOVS     R0,#+255
   \   00000034   0xE000             B.N      ??AH_Full_0F_Verify_4
    164          
    165              return 0x01;
   \                     ??AH_Full_0F_Verify_8:
   \   00000036   0x2001             MOVS     R0,#+1
   \                     ??AH_Full_0F_Verify_4:
   \   00000038   0x4770             BX       LR               ;; return
    166            }
    167          
    168          

   \                                 In section .text, align 2, keep-with-next
    169           unsigned char CRC_CHECK ( unsigned char *strFrame, unsigned char crc_longth )
    170            {
   \                     CRC_CHECK:
   \   00000000   0xB41C             PUSH     {R2-R4}
   \   00000002   0x0002             MOVS     R2,R0
    171              unsigned int i;
    172          	INT_16BIT_08BIT crc ;
    173          	INT_16BIT_08BIT y ;
    174          	crc.Int16Bit = 0 ;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    175          	for( i = 0 ; i < crc_longth ; i++ )
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0003             MOVS     R3,R0
   \                     ??CRC_CHECK_0:
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD216             BCS.N    ??CRC_CHECK_1
    176          	 {
    177          		y.Int16Bit    = CRC_Tab[ *strFrame ^ crc.Int08Bit.H ] ;
   \   00000014   0x7810             LDRB     R0,[R2, #+0]
   \   00000016   0xF89D 0x4001      LDRB     R4,[SP, #+1]
   \   0000001A   0x4060             EORS     R0,R4,R0
   \   0000001C   0x....             LDR.N    R4,??DataTable1
   \   0000001E   0xF834 0x0010      LDRH     R0,[R4, R0, LSL #+1]
   \   00000022   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    178          		y.Int08Bit.H ^= crc.Int08Bit.L ;
   \   00000026   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   0000002A   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   0000002E   0x4060             EORS     R0,R4,R0
   \   00000030   0xF88D 0x0005      STRB     R0,[SP, #+5]
    179          		crc.Int16Bit  = y.Int16Bit ;
   \   00000034   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000038   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    180                  strFrame++;
   \   0000003C   0x1C52             ADDS     R2,R2,#+1
    181          	 }
   \   0000003E   0x1C5B             ADDS     R3,R3,#+1
   \   00000040   0xE7E5             B.N      ??CRC_CHECK_0
    182              crc.Int08Bit.H ^= crc.Int08Bit.L ;
   \                     ??CRC_CHECK_1:
   \   00000042   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000046   0xF89D 0x4000      LDRB     R4,[SP, #+0]
   \   0000004A   0x4060             EORS     R0,R4,R0
   \   0000004C   0xF88D 0x0001      STRB     R0,[SP, #+1]
    183          	return ( crc.Int08Bit.H ) ;
   \   00000050   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000054   0xBC16             POP      {R1,R2,R4}
   \   00000056   0x4770             BX       LR               ;; return
    184            }
    185          
    186          /***********************************************
    187          º¯Êý¹¦ÄÜ£º¶ÔÊý×éÖÐµÄÔªËØ½øÐÐÒì»ò
    188          Èë¿Ú²ÎÊý£ºbuffer,Êý×éÊ×µØÖ·£»length,Êý×é³¤¶È
    189          ***********************************************/

   \                                 In section .text, align 2, keep-with-next
    190          unsigned char XOR(unsigned char *buffer,unsigned char length)
    191          {
   \                     `XOR`:
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0002             MOVS     R2,R0
    192          	unsigned char result;
    193          	unsigned char i;
    194          	result =0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x0020             MOVS     R0,R4
    195          	for(i =0;i< length;i++)
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0x0023             MOVS     R3,R4
   \                     ??XOR_0:
   \   0000000C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x428B             CMP      R3,R1
   \   00000012   0xD204             BCS.N    ??XOR_1
    196          	{
    197          		result ^=buffer[i];
   \   00000014   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000016   0x5C9C             LDRB     R4,[R3, R2]
   \   00000018   0x4060             EORS     R0,R4,R0
    198          	}
   \   0000001A   0x1C5B             ADDS     R3,R3,#+1
   \   0000001C   0xE7F6             B.N      ??XOR_0
    199            return(result);
   \                     ??XOR_1:
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xBC10             POP      {R4}
   \   00000022   0x4770             BX       LR               ;; return
    200          }

   \                                 In section .text, align 2, keep-with-next
    201          void CalCrc16(unsigned char* input, unsigned char* Crc16, unsigned int len)   
    202          {
   \                     CalCrc16:
   \   00000000   0xB470             PUSH     {R4-R6}
    203          	unsigned int temp=0x6363;
   \   00000002   0xF246 0x3363      MOVW     R3,#+25443
    204              unsigned int i;
    205              unsigned char j;
    206          
    207          	for( i=0; i<len; i++ )
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x0034             MOVS     R4,R6
   \                     ??CalCrc16_0:
   \   0000000A   0x4294             CMP      R4,R2
   \   0000000C   0xD214             BCS.N    ??CalCrc16_1
    208          	{	
    209          	  temp = temp ^((unsigned int)input[i]);
   \   0000000E   0x5C26             LDRB     R6,[R4, R0]
   \   00000010   0x4073             EORS     R3,R6,R3
    210          	  for (j = 0; j < 8; j++)
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x0035             MOVS     R5,R6
   \                     ??CalCrc16_2:
   \   00000016   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000018   0x2D08             CMP      R5,#+8
   \   0000001A   0xD20B             BCS.N    ??CalCrc16_3
    211          	  {
    212          		if (temp & 0x0001)
   \   0000001C   0x001E             MOVS     R6,R3
   \   0000001E   0x07F6             LSLS     R6,R6,#+31
   \   00000020   0xD505             BPL.N    ??CalCrc16_4
    213          		{
    214          		  temp = (temp >> 1) ^ 0x8408;
   \   00000022   0x085B             LSRS     R3,R3,#+1
   \   00000024   0xF483 0x4304      EOR      R3,R3,#0x8400
   \   00000028   0xF093 0x0308      EORS     R3,R3,#0x8
   \   0000002C   0xE000             B.N      ??CalCrc16_5
    215          	        }
    216          		else
    217          		{
    218          		  temp = (temp >> 1);
   \                     ??CalCrc16_4:
   \   0000002E   0x085B             LSRS     R3,R3,#+1
    219          		}
    220          	  }
   \                     ??CalCrc16_5:
   \   00000030   0x1C6D             ADDS     R5,R5,#+1
   \   00000032   0xE7F0             B.N      ??CalCrc16_2
    221          	}
   \                     ??CalCrc16_3:
   \   00000034   0x1C64             ADDS     R4,R4,#+1
   \   00000036   0xE7E8             B.N      ??CalCrc16_0
    222          	Crc16[0] = (unsigned char)(temp);
   \                     ??CalCrc16_1:
   \   00000038   0x700B             STRB     R3,[R1, #+0]
    223            	Crc16[1] = (unsigned char)(temp>>8);
   \   0000003A   0x0A1E             LSRS     R6,R3,#+8
   \   0000003C   0x704E             STRB     R6,[R1, #+1]
    224          } 
   \   0000003E   0xBC70             POP      {R4-R6}
   \   00000040   0x4770             BX       LR               ;; return
    225          //*----------------------------------------------------------------------------
    226          //* Function Name       : BE4StrToInt
    227          //* Object              : 4×Ö½ÚHEX×Ö·û´®±ä»¯INT
    228          //* Input Parameters    : none
    229          //* Output Parameters   : none
    230          //* Functions called    : none
    231          //*----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    232          unsigned int BE4StrToInt(unsigned char *str)
    233          {	
   \                     BE4StrToInt:
   \   00000000   0xB081             SUB      SP,SP,#+4
   \   00000002   0x0001             MOVS     R1,R0
    234          	int i;
    235          	char * p;
    236          	p = (char*)&i;
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x0002             MOVS     R2,R0
    237          	*(p+0)=*(str+3);	
   \   00000008   0x78C8             LDRB     R0,[R1, #+3]
   \   0000000A   0x7010             STRB     R0,[R2, #+0]
    238          	*(p+1)=*(str+2);	
   \   0000000C   0x7888             LDRB     R0,[R1, #+2]
   \   0000000E   0x7050             STRB     R0,[R2, #+1]
    239          	*(p+2)=*(str+1);	
   \   00000010   0x7848             LDRB     R0,[R1, #+1]
   \   00000012   0x7090             STRB     R0,[R2, #+2]
    240          	*(p+3)=*(str+0);	
   \   00000014   0x7808             LDRB     R0,[R1, #+0]
   \   00000016   0x70D0             STRB     R0,[R2, #+3]
    241          	return i;
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0xB001             ADD      SP,SP,#+4
   \   0000001C   0x4770             BX       LR               ;; return
    242          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     CRC_Tab

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  AH_CRC_Verify
        0  AH_Full_0F_Verify
        4  BE4StrToInt
       12  CRC_CHECK
       12  CalCrc16
        4  XOR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      92  AH_CRC_Verify
      58  AH_Full_0F_Verify
      30  BE4StrToInt
      88  CRC_CHECK
     512  CRC_Tab
      66  CalCrc16
      36  XOR

 
 512 bytes in section .rodata
 374 bytes in section .text
 
 374 bytes of CODE  memory
 512 bytes of CONST memory

Errors: none
Warnings: none
