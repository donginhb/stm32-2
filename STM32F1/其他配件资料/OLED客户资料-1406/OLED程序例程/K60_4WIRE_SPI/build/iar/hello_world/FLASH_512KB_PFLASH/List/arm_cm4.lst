###############################################################################
#                                                                             #
#                                                       08/Jul/2014  15:37:34 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\cpu #
#                    \arm_cm4.c                                               #
#    Command line =  "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\cpu #
#                    \arm_cm4.c" -D IAR -D TWR_K60N512 -lCN                   #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\" -lB             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\" -o              #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config              #
#                    C:\IAR\arm\INC\c\DLib_Config_Normal.h -I                 #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\projects\hello_world\" -I    #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\common\" -I                  #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\cpu\" -I                     #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\cpu\headers\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\adc16\" -I           #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\enet\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\pmc\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\rtc\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\lptmr\" -I           #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\uart\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\mcg\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\wdog\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\platforms\" -I               #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\ftm\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\SPI\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\OLED\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\" -Ol --use_c++_inline                 #
#    List file    =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\arm_cm4.lst       #
#    Object file  =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\Obj\arm_cm4.o          #
#                                                                             #
#                                                                             #
###############################################################################

E:\完成设计的产品\K60资料\OLED资料 (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\cpu\arm_cm4.c
      1          /*
      2           * File:		arm_cm4.c
      3           * Purpose:		Generic high-level routines for ARM Cortex M4 processors
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          /***********************************************************************/
     11          /*
     12           * Configures the ARM system control register for STOP (deep sleep) mode
     13           * and then executes the WFI instruction to enter the mode.
     14           *
     15           * Parameters:
     16           * none
     17           *
     18           * Note: Might want to change this later to allow for passing in a parameter
     19           *       to optionally set the sleep on exit bit.
     20           */
     21          

   \                                 In section .text, align 4, keep-with-next
     22          void stop (void)
     23          {
     24          	/* Set the SLEEPDEEP bit to enable deep sleep mode (STOP) */
     25          	SCB_SCR |= SCB_SCR_SLEEPDEEP_MASK;	
   \                     stop:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     26          
     27          	/* WFI instruction will start entry into STOP mode */
     28          	asm("WFI");
   \   0000000C   0xBF30             WFI              
     29          }
   \   0000000E   0x4770             BX       LR               ;; return
     30          /***********************************************************************/
     31          /*
     32           * Configures the ARM system control register for WAIT (sleep) mode
     33           * and then executes the WFI instruction to enter the mode.
     34           *
     35           * Parameters:
     36           * none
     37           *
     38           * Note: Might want to change this later to allow for passing in a parameter
     39           *       to optionally set the sleep on exit bit.
     40           */
     41          

   \                                 In section .text, align 4, keep-with-next
     42          void wait (void)
     43          {
     44          	/* Clear the SLEEPDEEP bit to make sure we go into WAIT (sleep) mode instead
     45          	 * of deep sleep.
     46          	 */
     47          	SCB_SCR &= ~SCB_SCR_SLEEPDEEP_MASK;	
   \                     wait:
   \   00000000   0x....             LDR.N    R0,??DataTable5  ;; 0xe000ed10
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF030 0x0004      BICS     R0,R0,#0x4
   \   00000008   0x....             LDR.N    R1,??DataTable5  ;; 0xe000ed10
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     48          
     49          	/* WFI instruction will start entry into WAIT mode */
     50          	asm("WFI");
   \   0000000C   0xBF30             WFI              
     51          }
   \   0000000E   0x4770             BX       LR               ;; return
     52          /***********************************************************************/
     53          /*
     54           * Change the value of the vector table offset register to the specified value.
     55           *
     56           * Parameters:
     57           * vtor     new value to write to the VTOR
     58           */
     59          

   \                                 In section .text, align 2, keep-with-next
     60          void write_vtor (int vtor)
     61          {
     62                  /* Write the VTOR with the new value */
     63                  SCB_VTOR = vtor;	
   \                     write_vtor:
   \   00000000   0x....             LDR.N    R1,??DataTable5_1  ;; 0xe000ed08
   \   00000002   0x6008             STR      R0,[R1, #+0]
     64          }
   \   00000004   0x4770             BX       LR               ;; return
     65          /***********************************************************************/
     66          /*
     67           * Initialize the NVIC to enable the specified IRQ.
     68           * 
     69           * NOTE: The function only initializes the NVIC to enable a single IRQ. 
     70           * Interrupts will also need to be enabled in the ARM core. This can be 
     71           * done using the EnableInterrupts macro.
     72           *
     73           * Parameters:
     74           * irq    irq number to be enabled (the irq number NOT the vector number)
     75           */
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void enable_irq (int irq)
     78          {
   \                     enable_irq:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     79              int div;
     80              
     81              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
     82               * used.
     83               */
     84              if (irq > 91)
   \   00000004   0x2C5C             CMP      R4,#+92
   \   00000006   0xDB02             BLT.N    ??enable_irq_0
     85                  printf("\nERR! Invalid IRQ value passed to enable irq function!\n");
   \   00000008   0x....             LDR.N    R0,??DataTable5_2
   \   0000000A   0x.... 0x....      BL       printf
     86              
     87              /* Determine which of the NVICISERs corresponds to the irq */
     88              div = irq/32;
   \                     ??enable_irq_0:
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xFB94 0xF0F0      SDIV     R0,R4,R0
     89              
     90              switch (div)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??enable_irq_1
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD027             BEQ.N    ??enable_irq_2
   \   0000001C   0xD313             BCC.N    ??enable_irq_3
   \   0000001E   0xE037             B.N      ??enable_irq_4
     91              {
     92              	case 0x0:
     93                        NVICICPR0 = 1 << (irq%32);
   \                     ??enable_irq_1:
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2120             MOVS     R1,#+32
   \   00000024   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000028   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000002C   0x4090             LSLS     R0,R0,R2
   \   0000002E   0x....             LDR.N    R1,??DataTable5_3  ;; 0xe000e280
   \   00000030   0x6008             STR      R0,[R1, #+0]
     94                        NVICISER0 = 1 << (irq%32);
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x2120             MOVS     R1,#+32
   \   00000036   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000003A   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000003E   0x4090             LSLS     R0,R0,R2
   \   00000040   0x....             LDR.N    R1,??DataTable5_4  ;; 0xe000e100
   \   00000042   0x6008             STR      R0,[R1, #+0]
     95                        break;
   \   00000044   0xE024             B.N      ??enable_irq_4
     96              	case 0x1:
     97                        NVICICPR1 = 1 << (irq%32);
   \                     ??enable_irq_3:
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x2120             MOVS     R1,#+32
   \   0000004A   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000004E   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000052   0x4090             LSLS     R0,R0,R2
   \   00000054   0x....             LDR.N    R1,??DataTable5_5  ;; 0xe000e284
   \   00000056   0x6008             STR      R0,[R1, #+0]
     98                        NVICISER1 = 1 << (irq%32);
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x2120             MOVS     R1,#+32
   \   0000005C   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000060   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000064   0x4090             LSLS     R0,R0,R2
   \   00000066   0x....             LDR.N    R1,??DataTable5_6  ;; 0xe000e104
   \   00000068   0x6008             STR      R0,[R1, #+0]
     99                        break;
   \   0000006A   0xE011             B.N      ??enable_irq_4
    100              	case 0x2:
    101                        NVICICPR2 = 1 << (irq%32);
   \                     ??enable_irq_2:
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0x2120             MOVS     R1,#+32
   \   00000070   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000074   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000078   0x4090             LSLS     R0,R0,R2
   \   0000007A   0x....             LDR.N    R1,??DataTable5_7  ;; 0xe000e288
   \   0000007C   0x6008             STR      R0,[R1, #+0]
    102                        NVICISER2 = 1 << (irq%32);
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x2120             MOVS     R1,#+32
   \   00000082   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000086   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000008A   0x4090             LSLS     R0,R0,R2
   \   0000008C   0x....             LDR.N    R1,??DataTable5_8  ;; 0xe000e108
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    103                        break;
    104              }              
    105          }
   \                     ??enable_irq_4:
   \   00000090   0xBD10             POP      {R4,PC}          ;; return
    106          /***********************************************************************/
    107          /*
    108           * Initialize the NVIC to disable the specified IRQ.
    109           * 
    110           * NOTE: The function only initializes the NVIC to disable a single IRQ. 
    111           * If you want to disable all interrupts, then use the DisableInterrupts
    112           * macro instead. 
    113           *
    114           * Parameters:
    115           * irq    irq number to be disabled (the irq number NOT the vector number)
    116           */
    117          

   \                                 In section .text, align 2, keep-with-next
    118          void disable_irq (int irq)
    119          {
   \                     disable_irq:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    120              int div;
    121              
    122              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
    123               * used.
    124               */
    125              if (irq > 91)
   \   00000004   0x2C5C             CMP      R4,#+92
   \   00000006   0xDB02             BLT.N    ??disable_irq_0
    126                  printf("\nERR! Invalid IRQ value passed to disable irq function!\n");
   \   00000008   0x....             LDR.N    R0,??DataTable5_9
   \   0000000A   0x.... 0x....      BL       printf
    127              
    128              /* Determine which of the NVICICERs corresponds to the irq */
    129              div = irq/32;
   \                     ??disable_irq_0:
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0xFB94 0xF0F0      SDIV     R0,R4,R0
    130              
    131              switch (div)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD003             BEQ.N    ??disable_irq_1
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD015             BEQ.N    ??disable_irq_2
   \   0000001C   0xD30A             BCC.N    ??disable_irq_3
   \   0000001E   0xE01C             B.N      ??disable_irq_4
    132              {
    133              	case 0x0:
    134                         NVICICER0 = 1 << (irq%32);
   \                     ??disable_irq_1:
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x2120             MOVS     R1,#+32
   \   00000024   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000028   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   0000002C   0x4090             LSLS     R0,R0,R2
   \   0000002E   0x....             LDR.N    R1,??DataTable5_10  ;; 0xe000e180
   \   00000030   0x6008             STR      R0,[R1, #+0]
    135                        break;
   \   00000032   0xE012             B.N      ??disable_irq_4
    136              	case 0x1:
    137                        NVICICER1 = 1 << (irq%32);
   \                     ??disable_irq_3:
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x2120             MOVS     R1,#+32
   \   00000038   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   0000003C   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000040   0x4090             LSLS     R0,R0,R2
   \   00000042   0x....             LDR.N    R1,??DataTable5_11  ;; 0xe000e184
   \   00000044   0x6008             STR      R0,[R1, #+0]
    138                        break;
   \   00000046   0xE008             B.N      ??disable_irq_4
    139              	case 0x2:
    140                        NVICICER2 = 1 << (irq%32);
   \                     ??disable_irq_2:
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x2120             MOVS     R1,#+32
   \   0000004C   0xFB94 0xF2F1      SDIV     R2,R4,R1
   \   00000050   0xFB02 0x4211      MLS      R2,R2,R1,R4
   \   00000054   0x4090             LSLS     R0,R0,R2
   \   00000056   0x....             LDR.N    R1,??DataTable5_12  ;; 0xe000e188
   \   00000058   0x6008             STR      R0,[R1, #+0]
    141                        break;
    142              }              
    143          }
   \                     ??disable_irq_4:
   \   0000005A   0xBD10             POP      {R4,PC}          ;; return
    144          /***********************************************************************/
    145          /*
    146           * Initialize the NVIC to set specified IRQ priority.
    147           * 
    148           * NOTE: The function only initializes the NVIC to set a single IRQ priority. 
    149           * Interrupts will also need to be enabled in the ARM core. This can be 
    150           * done using the EnableInterrupts macro.
    151           *
    152           * Parameters:
    153           * irq    irq number to be enabled (the irq number NOT the vector number)
    154           * prio   irq priority. 0-15 levels. 0 max priority
    155           */
    156          

   \                                 In section .text, align 2, keep-with-next
    157          void set_irq_priority (int irq, int prio)
    158          {
   \                     set_irq_priority:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    159              /*irq priority pointer*/
    160              uint8 *prio_reg;
    161              
    162              /* Make sure that the IRQ is an allowable number. Right now up to 91 is 
    163               * used.
    164               */
    165              if (irq > 91)
   \   00000006   0x2C5C             CMP      R4,#+92
   \   00000008   0xDB02             BLT.N    ??set_irq_priority_0
    166                  printf("\nERR! Invalid IRQ value passed to priority irq function!\n");
   \   0000000A   0x....             LDR.N    R0,??DataTable5_13
   \   0000000C   0x.... 0x....      BL       printf
    167          
    168              if (prio > 15)
   \                     ??set_irq_priority_0:
   \   00000010   0x2D10             CMP      R5,#+16
   \   00000012   0xDB02             BLT.N    ??set_irq_priority_1
    169                  printf("\nERR! Invalid priority value passed to priority irq function!\n");
   \   00000014   0x....             LDR.N    R0,??DataTable5_14
   \   00000016   0x.... 0x....      BL       printf
    170              
    171              /* Determine which of the NVICIPx corresponds to the irq */
    172              prio_reg = (uint8 *)(((uint32)&NVICIP0) + irq);
   \                     ??set_irq_priority_1:
   \   0000001A   0xF104 0x4060      ADD      R0,R4,#-536870912
   \   0000001E   0xF510 0x4064      ADDS     R0,R0,#+58368
    173              /* Assign priority to IRQ */
    174              *prio_reg = ( (prio&0xF) << (8 - ARM_INTERRUPT_LEVEL_BITS) );             
   \   00000022   0x0129             LSLS     R1,R5,#+4
   \   00000024   0x7001             STRB     R1,[R0, #+0]
    175          }
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000ED08         DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E284         DC32     0xe000e284

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0xE000E104         DC32     0xe000e104

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000E288         DC32     0xe000e288

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0xE000E108         DC32     0xe000e108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0xE000E180         DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0xE000E184         DC32     0xe000e184

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0xE000E188         DC32     0xe000e188

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid IRQ val...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     `?<Constant "\\nERR! Invalid priorit...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 65H, 6EH, 61H, 62H, 6CH, 65H
   \              0x65 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \   00000028   0x20 0x69          DC8 20H, 69H, 72H, 71H, 20H, 66H, 75H, 6EH
   \              0x72 0x71    
   \              0x20 0x66    
   \              0x75 0x6E    
   \   00000030   0x63 0x74          DC8 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x69 0x6F    
   \              0x6E 0x21    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_1`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 64H, 69H, 73H, 61H, 62H, 6CH
   \              0x64 0x69    
   \              0x73 0x61    
   \              0x62 0x6C    
   \   00000028   0x65 0x20          DC8 65H, 20H, 69H, 72H, 71H, 20H, 66H, 75H
   \              0x69 0x72    
   \              0x71 0x20    
   \              0x66 0x75    
   \   00000030   0x6E 0x63          DC8 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H, 0AH
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid IRQ val...">_2`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 49H, 52H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x49 0x52    
   \   00000010   0x51 0x20          DC8 51H, 20H, 76H, 61H, 6CH, 75H, 65H, 20H
   \              0x76 0x61    
   \              0x6C 0x75    
   \              0x65 0x20    
   \   00000018   0x70 0x61          DC8 70H, 61H, 73H, 73H, 65H, 64H, 20H, 74H
   \              0x73 0x73    
   \              0x65 0x64    
   \              0x20 0x74    
   \   00000020   0x6F 0x20          DC8 6FH, 20H, 70H, 72H, 69H, 6FH, 72H, 69H
   \              0x70 0x72    
   \              0x69 0x6F    
   \              0x72 0x69    
   \   00000028   0x74 0x79          DC8 74H, 79H, 20H, 69H, 72H, 71H, 20H, 66H
   \              0x20 0x69    
   \              0x72 0x71    
   \              0x20 0x66    
   \   00000030   0x75 0x6E          DC8 75H, 6EH, 63H, 74H, 69H, 6FH, 6EH, 21H
   \              0x63 0x74    
   \              0x69 0x6F    
   \              0x6E 0x21    
   \   00000038   0x0A 0x00          DC8 0AH, 0
   \   0000003A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nERR! Invalid priorit...">`:
   \   00000000   0x0A 0x45          DC8 0AH, 45H, 52H, 52H, 21H, 20H, 49H, 6EH
   \              0x52 0x52    
   \              0x21 0x20    
   \              0x49 0x6E    
   \   00000008   0x76 0x61          DC8 76H, 61H, 6CH, 69H, 64H, 20H, 70H, 72H
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x70 0x72    
   \   00000010   0x69 0x6F          DC8 69H, 6FH, 72H, 69H, 74H, 79H, 20H, 76H
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x76    
   \   00000018   0x61 0x6C          DC8 61H, 6CH, 75H, 65H, 20H, 70H, 61H, 73H
   \              0x75 0x65    
   \              0x20 0x70    
   \              0x61 0x73    
   \   00000020   0x73 0x65          DC8 73H, 65H, 64H, 20H, 74H, 6FH, 20H, 70H
   \              0x64 0x20    
   \              0x74 0x6F    
   \              0x20 0x70    
   \   00000028   0x72 0x69          DC8 72H, 69H, 6FH, 72H, 69H, 74H, 79H, 20H
   \              0x6F 0x72    
   \              0x69 0x74    
   \              0x79 0x20    
   \   00000030   0x69 0x72          DC8 69H, 72H, 71H, 20H, 66H, 75H, 6EH, 63H
   \              0x71 0x20    
   \              0x66 0x75    
   \              0x6E 0x63    
   \   00000038   0x74 0x69          DC8 74H, 69H, 6FH, 6EH, 21H, 0AH, 0
   \              0x6F 0x6E    
   \              0x21 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0
    176          /***********************************************************************/
    177          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  disable_irq
              8 -> printf
        8  enable_irq
              8 -> printf
       16  set_irq_priority
             16 -> printf
        0  stop
        0  wait
        0  write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      56  ?<Constant "\nERR! Invalid IRQ val...">
      60  ?<Constant "\nERR! Invalid IRQ val...">_1
      60  ?<Constant "\nERR! Invalid IRQ val...">_2
      64  ?<Constant "\nERR! Invalid priorit...">
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      92  disable_irq
     146  enable_irq
      40  set_irq_priority
      16  stop
      16  wait
       6  write_vtor

 
 240 bytes in section .rodata
 376 bytes in section .text
 
 376 bytes of CODE  memory
 240 bytes of CONST memory

Errors: none
Warnings: none
