###############################################################################
#                                                                             #
#                                                       08/Jul/2014  15:37:34 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\dri #
#                    vers\enet\enet.c                                         #
#    Command line =  "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\dri #
#                    vers\enet\enet.c" -D IAR -D TWR_K60N512 -lCN             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\" -lB             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\" -o              #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\Obj\" --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config              #
#                    C:\IAR\arm\INC\c\DLib_Config_Normal.h -I                 #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\projects\hello_world\" -I    #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\common\" -I                  #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\cpu\" -I                     #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\cpu\headers\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\adc16\" -I           #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\enet\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\pmc\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\rtc\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\lptmr\" -I           #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\uart\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\mcg\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\wdog\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\platforms\" -I               #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\ftm\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\SPI\" -I             #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\..\..\src\drivers\OLED\" -I            #
#                    "E:\完成设计的产品\K60资料\OLED资料                      #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\..\" -Ol --use_c++_inline                 #
#    List file    =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\List\enet.lst          #
#    Object file  =  E:\完成设计的产品\K60资料\OLED资料                       #
#                    (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\build\i #
#                    ar\hello_world\FLASH_512KB_PFLASH\Obj\enet.o             #
#                                                                             #
#                                                                             #
###############################################################################

E:\完成设计的产品\K60资料\OLED资料 (1)\OLED客户资料-1406\OLED程序例程\K60_4WIRE_SPI\src\drivers\enet\enet.c
      1          /*
      2           * File:    enet.c
      3           * Purpose: Driver for the ENET controller
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          #include "enet.h"
     10          #include "nbuf.h"
     11          #include "eth.h"
     12          
     13          
     14          /********************************************************************/
     15          /* Initialize the MIB counters
     16           *
     17           * Parameters:
     18           *  ch      FEC channel
     19           */

   \                                 In section .text, align 2, keep-with-next
     20          void
     21          enet_mib_init(int ch)
     22          {
     23          //To do
     24          }
   \                     enet_mib_init:
   \   00000000   0x4770             BX       LR               ;; return
     25          /********************************************************************/
     26          /* Display the MIB counters
     27           *
     28           * Parameters:
     29           *  ch      FEC channel
     30           */

   \                                 In section .text, align 2, keep-with-next
     31          void
     32          enet_mib_dump(int ch)
     33          {
     34          //To do
     35          }
   \                     enet_mib_dump:
   \   00000000   0x4770             BX       LR               ;; return
     36          /********************************************************************/
     37          /*
     38           * Set the duplex on the selected FEC controller
     39           *
     40           * Parameters:
     41           *  ch      FEC channel
     42           *  duplex  enet_MII_FULL_DUPLEX or enet_MII_HALF_DUPLEX
     43           */

   \                                 In section .text, align 2, keep-with-next
     44          void
     45          enet_duplex (int ch, ENET_DUPLEX duplex)
     46          {
     47              switch (duplex)
   \                     enet_duplex:
   \   00000000   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000002   0x2900             CMP      R1,#+0
   \   00000004   0xD10C             BNE.N    ??enet_duplex_0
     48              {
     49                  case MII_HDX:
     50                      ENET_RCR/*(ch)*/ |= ENET_RCR_DRT_MASK;
   \   00000006   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   0000000E   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   00000010   0x6008             STR      R0,[R1, #+0]
     51                      ENET_TCR/*(ch)*/ &= (uint32_t)~ENET_TCR_FDEN_MASK;
   \   00000012   0x....             LDR.N    R0,??DataTable6_1  ;; 0x400c00c4
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0xF030 0x0004      BICS     R0,R0,#0x4
   \   0000001A   0x....             LDR.N    R1,??DataTable6_1  ;; 0x400c00c4
   \   0000001C   0x6008             STR      R0,[R1, #+0]
     52                      break;
   \   0000001E   0xE00B             B.N      ??enet_duplex_1
     53                  case MII_FDX:
     54                  default:
     55                      ENET_RCR/*(ch)*/ &= ~ENET_RCR_DRT_MASK;
   \                     ??enet_duplex_0:
   \   00000020   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0xF030 0x0002      BICS     R0,R0,#0x2
   \   00000028   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   0000002A   0x6008             STR      R0,[R1, #+0]
     56                      ENET_TCR/*(ch)*/ |= ENET_TCR_FDEN_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable6_1  ;; 0x400c00c4
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   00000034   0x....             LDR.N    R1,??DataTable6_1  ;; 0x400c00c4
   \   00000036   0x6008             STR      R0,[R1, #+0]
     57                      break;
     58              }
     59          }
   \                     ??enet_duplex_1:
   \   00000038   0x4770             BX       LR               ;; return
     60          
     61          /********************************************************************/
     62          /*
     63           * Generate the hash table settings for the given address
     64           *
     65           * Parameters:
     66           *  addr    48-bit (6 byte) Address to generate the hash for
     67           *
     68           * Return Value:
     69           *  The 6 most significant bits of the 32-bit CRC result
     70           */

   \                                 In section .text, align 2, keep-with-next
     71          uint8_t
     72          enet_hash_address(const uint8_t* addr)
     73          {
   \                     enet_hash_address:
   \   00000000   0xB470             PUSH     {R4-R6}
     74              uint32_t crc;
     75              uint8_t byte;
     76              int i, j;
     77          
     78              crc = 0xFFFFFFFF;
   \   00000002   0xF05F 0x31FF      MOVS     R1,#-1
     79              for(i=0; i<6; ++i)
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0xE000             B.N      ??enet_hash_address_0
   \                     ??enet_hash_address_1:
   \   0000000A   0x1C5B             ADDS     R3,R3,#+1
   \                     ??enet_hash_address_0:
   \   0000000C   0x2B06             CMP      R3,#+6
   \   0000000E   0xDA15             BGE.N    ??enet_hash_address_2
     80              {
     81                  byte = addr[i];
   \   00000010   0x5C1A             LDRB     R2,[R3, R0]
     82                  for(j=0; j<8; ++j)
   \   00000012   0x2400             MOVS     R4,#+0
   \   00000014   0xE003             B.N      ??enet_hash_address_3
     83                  {
     84                      if((byte & 0x01)^(crc & 0x01))
     85                      {
     86                          crc >>= 1;
     87                          crc = crc ^ 0xEDB88320;
     88                      }
     89                      else
     90                          crc >>= 1;
   \                     ??enet_hash_address_4:
   \   00000016   0x0849             LSRS     R1,R1,#+1
     91                      byte >>= 1;
   \                     ??enet_hash_address_5:
   \   00000018   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000001A   0x0852             LSRS     R2,R2,#+1
   \   0000001C   0x1C64             ADDS     R4,R4,#+1
   \                     ??enet_hash_address_3:
   \   0000001E   0x2C08             CMP      R4,#+8
   \   00000020   0xDAF3             BGE.N    ??enet_hash_address_1
   \   00000022   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000024   0xF012 0x0501      ANDS     R5,R2,#0x1
   \   00000028   0xF011 0x0601      ANDS     R6,R1,#0x1
   \   0000002C   0x4075             EORS     R5,R6,R5
   \   0000002E   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000030   0x2D00             CMP      R5,#+0
   \   00000032   0xD0F0             BEQ.N    ??enet_hash_address_4
   \   00000034   0x0849             LSRS     R1,R1,#+1
   \   00000036   0x....             LDR.N    R5,??DataTable6_2  ;; 0xedb88320
   \   00000038   0x4069             EORS     R1,R5,R1
   \   0000003A   0xE7ED             B.N      ??enet_hash_address_5
     92                  }
     93              }
     94              return (uint8_t)(crc >> 26);
   \                     ??enet_hash_address_2:
   \   0000003C   0x0E88             LSRS     R0,R1,#+26
   \   0000003E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000040   0xBC70             POP      {R4-R6}
   \   00000042   0x4770             BX       LR               ;; return
     95          }
     96          /********************************************************************/
     97          /*
     98           * Set the Physical (Hardware) Address and the Individual Address
     99           * Hash in the selected FEC
    100           *
    101           * Parameters:
    102           *  ch  FEC channel
    103           *  pa  Physical (Hardware) Address for the selected FEC
    104           */

   \                                 In section .text, align 2, keep-with-next
    105          void
    106          enet_set_address (int ch, const uint8_t *pa)
    107          {
   \                     enet_set_address:
   \   00000000   0xB580             PUSH     {R7,LR}
    108              uint8_t crc;
    109          
    110              /*
    111               * Set the Physical Address
    112               */
    113              ENET_PALR/*(ch)*/ = (uint32_t)((pa[0]<<24) | (pa[1]<<16) | (pa[2]<<8) | pa[3]);
   \   00000002   0x7808             LDRB     R0,[R1, #+0]
   \   00000004   0x784A             LDRB     R2,[R1, #+1]
   \   00000006   0x0412             LSLS     R2,R2,#+16
   \   00000008   0xEA52 0x6000      ORRS     R0,R2,R0, LSL #+24
   \   0000000C   0x788A             LDRB     R2,[R1, #+2]
   \   0000000E   0xEA50 0x2002      ORRS     R0,R0,R2, LSL #+8
   \   00000012   0x78CA             LDRB     R2,[R1, #+3]
   \   00000014   0x4310             ORRS     R0,R2,R0
   \   00000016   0x....             LDR.N    R2,??DataTable6_3  ;; 0x400c00e4
   \   00000018   0x6010             STR      R0,[R2, #+0]
    114              ENET_PAUR/*(ch)*/ = (uint32_t)((pa[4]<<24) | (pa[5]<<16));
   \   0000001A   0x7908             LDRB     R0,[R1, #+4]
   \   0000001C   0x794A             LDRB     R2,[R1, #+5]
   \   0000001E   0x0412             LSLS     R2,R2,#+16
   \   00000020   0xEA52 0x6000      ORRS     R0,R2,R0, LSL #+24
   \   00000024   0x....             LDR.N    R2,??DataTable6_4  ;; 0x400c00e8
   \   00000026   0x6010             STR      R0,[R2, #+0]
    115          
    116              /*
    117               * Calculate and set the hash for given Physical Address
    118               * in the  Individual Address Hash registers
    119               */
    120              crc = enet_hash_address(pa);
   \   00000028   0x0008             MOVS     R0,R1
   \   0000002A   0x.... 0x....      BL       enet_hash_address
    121              if(crc >= 32)
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x2820             CMP      R0,#+32
   \   00000032   0xD309             BCC.N    ??enet_set_address_0
    122                  ENET_IAUR/*(ch)*/ |= (uint32_t)(1 << (crc - 32));
   \   00000034   0x....             LDR.N    R1,??DataTable6_5  ;; 0x400c0118
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x2201             MOVS     R2,#+1
   \   0000003A   0x3820             SUBS     R0,R0,#+32
   \   0000003C   0xFA12 0xF000      LSLS     R0,R2,R0
   \   00000040   0x4308             ORRS     R0,R0,R1
   \   00000042   0x....             LDR.N    R1,??DataTable6_5  ;; 0x400c0118
   \   00000044   0x6008             STR      R0,[R1, #+0]
   \   00000046   0xE007             B.N      ??enet_set_address_1
    123              else
    124                  ENET_IALR/*(ch)*/ |= (uint32_t)(1 << crc);
   \                     ??enet_set_address_0:
   \   00000048   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400c011c
   \   0000004A   0x6809             LDR      R1,[R1, #+0]
   \   0000004C   0x2201             MOVS     R2,#+1
   \   0000004E   0xFA12 0xF000      LSLS     R0,R2,R0
   \   00000052   0x4308             ORRS     R0,R0,R1
   \   00000054   0x....             LDR.N    R1,??DataTable6_6  ;; 0x400c011c
   \   00000056   0x6008             STR      R0,[R1, #+0]
    125          }
   \                     ??enet_set_address_1:
   \   00000058   0xBD01             POP      {R0,PC}          ;; return
    126          /********************************************************************/
    127          /*
    128           * Reset the selected FEC controller
    129           *
    130           * Parameters:
    131           *  ch      FEC channel
    132           */

   \                                 In section .text, align 4, keep-with-next
    133          void
    134          enet_reset (int ch)
    135          {
    136              int i;
    137          
    138              /* Set the Reset bit and clear the Enable bit */
    139              ENET_ECR/*(ch)*/ = ENET_ECR_RESET_MASK;
   \                     enet_reset:
   \   00000000   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400c0024
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6001             STR      R1,[R0, #+0]
    140          
    141              /* Wait at least 8 clock cycles */
    142              for (i=0; i<10; ++i)
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xE001             B.N      ??enet_reset_0
    143                  asm( "NOP" );
   \                     ??enet_reset_1:
   \   0000000A   0xBF00             NOP              
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \                     ??enet_reset_0:
   \   0000000E   0x280A             CMP      R0,#+10
   \   00000010   0xDBFB             BLT.N    ??enet_reset_1
    144          }
   \   00000012   0x4770             BX       LR               ;; return
    145          /********************************************************************/
    146          /*
    147           * Initialize the selected FEC
    148           *
    149           * Parameters:
    150           *  config: ENET parameters
    151           *
    152           *
    153           */

   \                                 In section .text, align 2, keep-with-next
    154          void
    155          enet_init (ENET_CONFIG *config)
    156          {
   \                     enet_init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    157              /* Clear the Individual and Group Address Hash registers */
    158              ENET_IALR/*(ch)*/ = 0;
   \   00000004   0x....             LDR.N    R0,??DataTable6_6  ;; 0x400c011c
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6001             STR      R1,[R0, #+0]
    159              ENET_IAUR/*(ch)*/ = 0;
   \   0000000A   0x....             LDR.N    R0,??DataTable6_5  ;; 0x400c0118
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    160              ENET_GALR/*(ch)*/ = 0;
   \   00000010   0x....             LDR.N    R0,??DataTable6_8  ;; 0x400c0124
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x6001             STR      R1,[R0, #+0]
    161              ENET_GAUR/*(ch)*/ = 0;
   \   00000016   0x....             LDR.N    R0,??DataTable6_9  ;; 0x400c0120
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    162          
    163              /* Set the Physical Address for the selected FEC */
    164              enet_set_address(config->ch, config->mac);
   \   0000001C   0xF114 0x0108      ADDS     R1,R4,#+8
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       enet_set_address
    165          
    166              /* Mask all FEC interrupts */
    167              ENET_EIMR/*(ch)*/ = 0;//FSL:ENET_EIMR_MASK_ALL_MASK;
   \   00000026   0x....             LDR.N    R0,??DataTable6_10  ;; 0x400c0008
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    168          
    169              /* Clear all FEC interrupt events */
    170              ENET_EIR/*(ch)*/ = 0xFFFFFFFF;//FSL:ENET_EIR_CLEAR_ALL_MASK;
   \   0000002C   0x....             LDR.N    R0,??DataTable6_11  ;; 0x400c0004
   \   0000002E   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000032   0x6001             STR      R1,[R0, #+0]
    171              
    172              /* Initialize the Receive Control Register */
    173              ENET_RCR/*(ch)*/ = 0
    174                  | ENET_RCR_MAX_FL(ETH_MAX_FRM)
    175                  | ENET_RCR_MII_MODE_MASK /*always*/
    176                  | ENET_RCR_CRCFWD_MASK;  /*no CRC pad required*/
   \   00000034   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000036   0x....             LDR.N    R1,??DataTable6_12  ;; 0x5ee4004
   \   00000038   0x6001             STR      R1,[R0, #+0]
    177          
    178              if ( config->interface == mac_rmii )
   \   0000003A   0x7860             LDRB     R0,[R4, #+1]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD110             BNE.N    ??enet_init_0
    179              {
    180                ENET_RCR/*(ch)*/ |= ENET_RCR_RMII_MODE_MASK;
   \   00000040   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF44F 0x7180      MOV      R1,#+256
   \   00000048   0x4308             ORRS     R0,R1,R0
   \   0000004A   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   0000004C   0x6008             STR      R0,[R1, #+0]
    181                
    182                /*only set speed in RMII mode*/
    183                if( config->speed == MII_10BASET )
   \   0000004E   0x78E0             LDRB     R0,[R4, #+3]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD106             BNE.N    ??enet_init_0
    184                {
    185                   ENET_RCR/*(ch)*/ |= ENET_RCR_RMII_10T_MASK;
   \   00000054   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0xF44F 0x7100      MOV      R1,#+512
   \   0000005C   0x4308             ORRS     R0,R1,R0
   \   0000005E   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   00000060   0x6008             STR      R0,[R1, #+0]
    186                }
    187              }/*no need to configure MAC MII interface*/ 
    188              
    189              ENET_TCR/*(ch)*/ = 0;    
   \                     ??enet_init_0:
   \   00000062   0x....             LDR.N    R0,??DataTable6_1  ;; 0x400c00c4
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x6001             STR      R1,[R0, #+0]
    190              
    191              /* Set the duplex */
    192              enet_duplex(config->ch, config->duplex);        
   \   00000068   0x7921             LDRB     R1,[R4, #+4]
   \   0000006A   0x7820             LDRB     R0,[R4, #+0]
   \   0000006C   0x.... 0x....      BL       enet_duplex
    193                  
    194              if (config->prom)
   \   00000070   0x79E0             LDRB     R0,[R4, #+7]
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD005             BEQ.N    ??enet_init_1
    195              {
    196                  ENET_RCR/*(ch)*/ |= ENET_RCR_PROM_MASK; 
   \   00000076   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   0000007E   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   00000080   0x6008             STR      R0,[R1, #+0]
    197              } 
    198              
    199          #ifdef ENHANCED_BD
    200              ENET_ECR/*(ch)*/ = ENET_ECR_EN1588_MASK;
   \                     ??enet_init_1:
   \   00000082   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400c0024
   \   00000084   0x2110             MOVS     R1,#+16
   \   00000086   0x6001             STR      R1,[R0, #+0]
    201          #else
    202              ENET_ECR/*(ch)*/ = 0;//clear register
    203          #endif
    204          
    205              if(config->loopback == INTERNAL_LOOPBACK)
   \   00000088   0x7960             LDRB     R0,[R4, #+5]
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD105             BNE.N    ??enet_init_2
    206              {
    207                  /*seems like RMII internal loopback works, even if it's not supported*/
    208                  ENET_RCR/*(0)*/ |= ENET_RCR_LOOP_MASK;
   \   0000008E   0x....             LDR.N    R0,??DataTable6  ;; 0x400c0084
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000096   0x....             LDR.N    R1,??DataTable6  ;; 0x400c0084
   \   00000098   0x6008             STR      R0,[R1, #+0]
    209              }
    210          }
   \                     ??enet_init_2:
   \   0000009A   0xBD10             POP      {R4,PC}          ;; return
    211          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    212          void
    213          enet_start (int ch)
    214          {
    215            // Enable FEC
    216            ENET_ECR/*(ch)*/ |= ENET_ECR_ETHEREN_MASK;
   \                     enet_start:
   \   00000000   0x....             LDR.N    R0,??DataTable6_7  ;; 0x400c0024
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000008   0x....             LDR.N    R1,??DataTable6_7  ;; 0x400c0024
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    217          }
   \   0000000C   0x4770             BX       LR               ;; return
    218          
    219          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    220          int 
    221          enet_wait_for_frame_receive(int ch, int timeout)
    222          {
   \                     enet_wait_for_frame_receive:
   \   00000000   0xB410             PUSH     {R4}
    223          	int i, return_val = 1;
   \   00000002   0x2001             MOVS     R0,#+1
    224                  
    225          	for (i=0; i < timeout; i++)
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xE000             B.N      ??enet_wait_for_frame_receive_0
   \                     ??enet_wait_for_frame_receive_1:
   \   00000008   0x1C52             ADDS     R2,R2,#+1
   \                     ??enet_wait_for_frame_receive_0:
   \   0000000A   0x428A             CMP      R2,R1
   \   0000000C   0xDA07             BGE.N    ??enet_wait_for_frame_receive_2
    226          	{
    227          		if (ENET_EIR/*(ch)*/ & ENET_EIR_RXF_MASK)
   \   0000000E   0x....             LDR.N    R3,??DataTable6_11  ;; 0x400c0004
   \   00000010   0x681B             LDR      R3,[R3, #+0]
   \   00000012   0x019B             LSLS     R3,R3,#+6
   \   00000014   0xD5F8             BPL.N    ??enet_wait_for_frame_receive_1
    228          		{
    229          			ENET_EIR/*(ch)*/ = ENET_EIR_RXF_MASK;
   \   00000016   0x....             LDR.N    R3,??DataTable6_11  ;; 0x400c0004
   \   00000018   0xF05F 0x7400      MOVS     R4,#+33554432
   \   0000001C   0x601C             STR      R4,[R3, #+0]
    230          			break;		
    231          		}
    232          	}
    233          
    234          	if(i == timeout)
   \                     ??enet_wait_for_frame_receive_2:
   \   0000001E   0x428A             CMP      R2,R1
   \   00000020   0xD100             BNE.N    ??enet_wait_for_frame_receive_3
    235          	{
    236          		return_val = 0;
   \   00000022   0x2000             MOVS     R0,#+0
    237          	}
    238          	return return_val;
   \                     ??enet_wait_for_frame_receive_3:
   \   00000024   0xBC10             POP      {R4}
   \   00000026   0x4770             BX       LR               ;; return
    239          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x400C0084         DC32     0x400c0084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x400C00C4         DC32     0x400c00c4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xEDB88320         DC32     0xedb88320

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x400C00E4         DC32     0x400c00e4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x400C00E8         DC32     0x400c00e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x400C0118         DC32     0x400c0118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x400C011C         DC32     0x400c011c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x400C0024         DC32     0x400c0024

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x400C0124         DC32     0x400c0124

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x400C0120         DC32     0x400c0120

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x400C0008         DC32     0x400c0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x400C0004         DC32     0x400c0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x05EE4004         DC32     0x5ee4004
    240          /********************************************************************/
    241          
    242          
    243          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  enet_duplex
       12  enet_hash_address
        8  enet_init
             8 -> enet_duplex
             8 -> enet_set_address
        0  enet_mib_dump
        0  enet_mib_init
        0  enet_reset
        8  enet_set_address
             8 -> enet_hash_address
        0  enet_start
        4  enet_wait_for_frame_receive


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      58  enet_duplex
      68  enet_hash_address
     156  enet_init
       2  enet_mib_dump
       2  enet_mib_init
      20  enet_reset
      90  enet_set_address
      14  enet_start
      40  enet_wait_for_frame_receive

 
 502 bytes in section .text
 
 502 bytes of CODE memory

Errors: none
Warnings: none
