###############################################################################
#                                                                             #
#                                                       07/May/2014  16:39:03 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\common\printf.c                               #
#    Command line =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\common\printf.c -D IAR -D TWR_K60N512 -lCN    #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\ -lB         #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\ -o          #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\ --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.0           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\projects\hello #
#                    _world\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kin #
#                    etisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\com #
#                    mon\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\headers #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\a #
#                    dc16\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kinet #
#                    isK60_Demo_OLED\build\iar\hello_world\..\..\..\src\drive #
#                    rs\enet\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Ki #
#                    netisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\dr #
#                    ivers\pmc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\ #
#                    KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\ #
#                    drivers\rtc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³ #
#                    Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\sr #
#                    c\drivers\lptmr\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐ #
#                    òÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\. #
#                    .\src\drivers\uart\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\ #
#                    ³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\. #
#                    .\..\src\drivers\mcg\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁ #
#                    Ï\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\.. #
#                    \..\..\src\drivers\wdog\ -I                              #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\platforms\ -I  #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\drivers\ftm\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\SPI #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\O #
#                    LED\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\ -On             #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\printf.lst   #
#    Object file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\printf.o      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\src\common\printf.c
      1          /*
      2           * File:        printk.c
      3           * Purpose:     The standard C library routine printf(), but without
      4           *              all the baggage.
      5           */
      6          
      7          #include "common.h"
      8          #include <stdarg.h>
      9          
     10          /********************************************************************/
     11          
     12          typedef struct
     13          {
     14              int dest;
     15              void (*func)(char);
     16              char *loc;
     17          } PRINTK_INFO;
     18          
     19          int 
     20          printk (PRINTK_INFO *, const char *, va_list);
     21          
     22          /********************************************************************/
     23          
     24          #define DEST_CONSOLE    (1)
     25          #define DEST_STRING     (2)
     26          
     27          #define FLAGS_MINUS     (0x01)
     28          #define FLAGS_PLUS      (0x02)
     29          #define FLAGS_SPACE     (0x04)
     30          #define FLAGS_ZERO      (0x08)
     31          #define FLAGS_POUND     (0x10)
     32          
     33          #define IS_FLAG_MINUS(a)    (a & FLAGS_MINUS)
     34          #define IS_FLAG_PLUS(a)     (a & FLAGS_PLUS)
     35          #define IS_FLAG_SPACE(a)    (a & FLAGS_SPACE)
     36          #define IS_FLAG_ZERO(a)     (a & FLAGS_ZERO)
     37          #define IS_FLAG_POUND(a)    (a & FLAGS_POUND)
     38          
     39          #define LENMOD_h        (0x01)
     40          #define LENMOD_l        (0x02)
     41          #define LENMOD_L        (0x04)
     42          
     43          #define IS_LENMOD_h(a)  (a & LENMOD_h)
     44          #define IS_LENMOD_l(a)  (a & LENMOD_l)
     45          #define IS_LENMOD_L(a)  (a & LENMOD_L)
     46          
     47          #define FMT_d   (0x0001)
     48          #define FMT_o   (0x0002)
     49          #define FMT_x   (0x0004)
     50          #define FMT_X   (0x0008)
     51          #define FMT_u   (0x0010)
     52          #define FMT_c   (0x0020)
     53          #define FMT_s   (0x0040)
     54          #define FMT_p   (0x0080)
     55          #define FMT_n   (0x0100)
     56          
     57          #define IS_FMT_d(a)     (a & FMT_d)
     58          #define IS_FMT_o(a)     (a & FMT_o)
     59          #define IS_FMT_x(a)     (a & FMT_x)
     60          #define IS_FMT_X(a)     (a & FMT_X)
     61          #define IS_FMT_u(a)     (a & FMT_u)
     62          #define IS_FMT_c(a)     (a & FMT_c)
     63          #define IS_FMT_s(a)     (a & FMT_s)
     64          #define IS_FMT_p(a)     (a & FMT_p)
     65          #define IS_FMT_n(a)     (a & FMT_n)
     66          
     67          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     68          static void
     69          printk_putc (int c, int *count, PRINTK_INFO *info)
     70          {
   \                     printk_putc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
     71              switch (info->dest)
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD002             BEQ.N    ??printk_putc_0
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD005             BEQ.N    ??printk_putc_1
   \   00000012   0xE00A             B.N      ??printk_putc_2
     72              {
     73                  case DEST_CONSOLE:
     74                      info->func((char)c);
   \                     ??printk_putc_0:
   \   00000014   0x0020             MOVS     R0,R4
   \   00000016   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000018   0x6871             LDR      R1,[R6, #+4]
   \   0000001A   0x4788             BLX      R1
     75                      break;
   \   0000001C   0xE005             B.N      ??printk_putc_3
     76                  case DEST_STRING:
     77                      *(info->loc) = (unsigned char)c;
   \                     ??printk_putc_1:
   \   0000001E   0x68B0             LDR      R0,[R6, #+8]
   \   00000020   0x7004             STRB     R4,[R0, #+0]
     78                      ++(info->loc);
   \   00000022   0x68B0             LDR      R0,[R6, #+8]
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x60B0             STR      R0,[R6, #+8]
     79                      break;
   \   00000028   0xE7FF             B.N      ??printk_putc_3
     80                  default:
     81                      break;
     82              }
     83              *count += 1;
   \                     ??printk_putc_2:
   \                     ??printk_putc_3:
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x6028             STR      R0,[R5, #+0]
     84          }
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
     85          
     86          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          static int
     88          printk_mknumstr (char *numstr, void *nump, int neg, int radix)
     89          {
   \                     printk_mknumstr:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
     90              int a,b,c;
     91              unsigned int ua,ub,uc;
     92          
     93              int nlen;
     94              char *nstrp;
     95          
     96              nlen = 0;
   \   00000006   0xF05F 0x0A00      MOVS     R10,#+0
   \   0000000A   0x4650             MOV      R0,R10
     97              nstrp = numstr;
   \   0000000C   0x46A1             MOV      R9,R4
     98              *nstrp++ = '\0';
   \   0000000E   0xF05F 0x0A00      MOVS     R10,#+0
   \   00000012   0xF889 0xA000      STRB     R10,[R9, #+0]
   \   00000016   0xF119 0x0901      ADDS     R9,R9,#+1
     99          
    100              if (neg)
   \   0000001A   0x2A00             CMP      R2,#+0
   \   0000001C   0xD01F             BEQ.N    ??printk_mknumstr_0
    101              {
    102                  a = *(int *)nump;
   \   0000001E   0xF8D1 0xA000      LDR      R10,[R1, #+0]
   \   00000022   0x4655             MOV      R5,R10
    103                  if (a == 0)
   \   00000024   0x2D00             CMP      R5,#+0
   \   00000026   0xD105             BNE.N    ??printk_mknumstr_1
    104                  {
    105                      *nstrp = '0';
   \   00000028   0xF05F 0x0A30      MOVS     R10,#+48
   \   0000002C   0xF889 0xA000      STRB     R10,[R9, #+0]
    106                      ++nlen;
   \   00000030   0x1C40             ADDS     R0,R0,#+1
    107                      goto done;
   \   00000032   0xE038             B.N      ??printk_mknumstr_2
    108                  }
    109                  while (a != 0)
   \                     ??printk_mknumstr_1:
   \   00000034   0x2D00             CMP      R5,#+0
   \   00000036   0xD036             BEQ.N    ??printk_mknumstr_2
    110                  {
    111                      b = (int)a / (int)radix;
   \   00000038   0xFB95 0xFAF3      SDIV     R10,R5,R3
   \   0000003C   0x4656             MOV      R6,R10
    112                      c = (int)a - ((int)b * (int)radix);
   \   0000003E   0xFB03 0x5A16      MLS      R10,R3,R6,R5
   \   00000042   0x4657             MOV      R7,R10
    113                      if (c < 0)
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xD502             BPL.N    ??printk_mknumstr_3
    114                      {
    115                          c = ~c + 1 + '0';
   \   00000048   0x43FF             MVNS     R7,R7
   \   0000004A   0x3731             ADDS     R7,R7,#+49
   \   0000004C   0xE000             B.N      ??printk_mknumstr_4
    116                      }
    117                      else
    118                      {
    119                          c = c + '0';
   \                     ??printk_mknumstr_3:
   \   0000004E   0x3730             ADDS     R7,R7,#+48
    120                      }
    121                      a = b;
   \                     ??printk_mknumstr_4:
   \   00000050   0x0035             MOVS     R5,R6
    122                      *nstrp++ = (char)c;
   \   00000052   0xF889 0x7000      STRB     R7,[R9, #+0]
   \   00000056   0xF119 0x0901      ADDS     R9,R9,#+1
    123                      ++nlen;
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0xE7EA             B.N      ??printk_mknumstr_1
    124                  }
    125              }
    126              else
    127              {
    128                  ua = *(unsigned int *)nump;
   \                     ??printk_mknumstr_0:
   \   0000005E   0xF8D1 0xA000      LDR      R10,[R1, #+0]
   \   00000062   0x46D4             MOV      R12,R10
    129                  if (ua == 0)
   \   00000064   0xF1BC 0x0F00      CMP      R12,#+0
   \   00000068   0xD105             BNE.N    ??printk_mknumstr_5
    130                  {
    131                      *nstrp = '0';
   \   0000006A   0xF05F 0x0A30      MOVS     R10,#+48
   \   0000006E   0xF889 0xA000      STRB     R10,[R9, #+0]
    132                      ++nlen;
   \   00000072   0x1C40             ADDS     R0,R0,#+1
    133                      goto done;
   \   00000074   0xE017             B.N      ??printk_mknumstr_2
    134                  }
    135                  while (ua != 0)
   \                     ??printk_mknumstr_5:
   \   00000076   0xF1BC 0x0F00      CMP      R12,#+0
   \   0000007A   0xD014             BEQ.N    ??printk_mknumstr_2
    136                  {
    137                      ub = (unsigned int)ua / (unsigned int)radix;
   \   0000007C   0xFBBC 0xFAF3      UDIV     R10,R12,R3
   \   00000080   0x46D6             MOV      LR,R10
    138                      uc = (unsigned int)ua - ((unsigned int)ub * (unsigned int)radix);
   \   00000082   0xFB03 0xCA1E      MLS      R10,R3,LR,R12
   \   00000086   0x46D0             MOV      R8,R10
    139                      if (uc < 10)
   \   00000088   0xF1B8 0x0F0A      CMP      R8,#+10
   \   0000008C   0xD202             BCS.N    ??printk_mknumstr_6
    140                      {
    141                          uc = uc + '0';
   \   0000008E   0xF118 0x0830      ADDS     R8,R8,#+48
   \   00000092   0xE001             B.N      ??printk_mknumstr_7
    142                      }
    143                      else
    144                      {
    145                          uc = uc - 10 + 'A';
   \                     ??printk_mknumstr_6:
   \   00000094   0xF118 0x0837      ADDS     R8,R8,#+55
    146                      }
    147                      ua = ub;
   \                     ??printk_mknumstr_7:
   \   00000098   0x46F4             MOV      R12,LR
    148                      *nstrp++ = (char)uc;
   \   0000009A   0xF889 0x8000      STRB     R8,[R9, #+0]
   \   0000009E   0xF119 0x0901      ADDS     R9,R9,#+1
    149                      ++nlen;
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0xE7E7             B.N      ??printk_mknumstr_5
    150                  }
    151              }
    152              done:
    153              return nlen;
   \                     ??printk_mknumstr_2:
   \   000000A6   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    154          }
    155          
    156          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          static void
    158          printk_pad_zero (int curlen, int field_width, int *count, PRINTK_INFO *info)
    159          {
   \                     printk_pad_zero:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    160              int i;
    161          
    162              for (i = curlen; i < field_width; i++)
   \   0000000C   0x46A0             MOV      R8,R4
   \                     ??printk_pad_zero_0:
   \   0000000E   0x45A8             CMP      R8,R5
   \   00000010   0xDA07             BGE.N    ??printk_pad_zero_1
    163              {
    164                  printk_putc('0',count, info);
   \   00000012   0x003A             MOVS     R2,R7
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x2030             MOVS     R0,#+48
   \   00000018   0x.... 0x....      BL       printk_putc
    165              }
   \   0000001C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000020   0xE7F5             B.N      ??printk_pad_zero_0
    166          }
   \                     ??printk_pad_zero_1:
   \   00000022   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    167          
    168          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    169          static void
    170          printk_pad_space (int curlen, int field_width, int *count, PRINTK_INFO *info)
    171          {
   \                     printk_pad_space:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
   \   0000000A   0x001F             MOVS     R7,R3
    172              int i;
    173          
    174              for (i = curlen; i < field_width; i++)
   \   0000000C   0x46A0             MOV      R8,R4
   \                     ??printk_pad_space_0:
   \   0000000E   0x45A8             CMP      R8,R5
   \   00000010   0xDA07             BGE.N    ??printk_pad_space_1
    175              {
    176                  printk_putc(' ',count, info);
   \   00000012   0x003A             MOVS     R2,R7
   \   00000014   0x0031             MOVS     R1,R6
   \   00000016   0x2020             MOVS     R0,#+32
   \   00000018   0x.... 0x....      BL       printk_putc
    177              }
   \   0000001C   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000020   0xE7F5             B.N      ??printk_pad_space_0
    178          }
   \                     ??printk_pad_space_1:
   \   00000022   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    179          
    180          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    181          int
    182          printk (PRINTK_INFO *info, const char *fmt, va_list ap)
    183          {
   \                     printk:
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB092             SUB      SP,SP,#+72
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x0015             MOVS     R5,R2
    184              /* va_list ap; */
    185              char *p;
    186              int c;
    187          
    188              char vstr[33];
    189              char *vstrp;
    190              int vlen;
    191          
    192              int done;
    193              int count = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
    194          
    195              int flags_used;
    196              int field_width;
    197          #if 0
    198              int precision_used;
    199              int precision_width;
    200              int length_modifier;
    201          #endif
    202          
    203              int ival;
    204              int schar, dschar;
    205              int *ivalp;
    206              char *sval;
    207              int cval;
    208              unsigned int uval;
    209          
    210              /*
    211               * Start parsing apart the format string and display appropriate
    212               * formats and data.
    213               */
    214              for (p = (char *)fmt; (c = *p) != 0; p++)
   \   0000000E   0x9812             LDR      R0,[SP, #+72]
   \   00000010   0x4683             MOV      R11,R0
   \                     ??printk_0:
   \   00000012   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000016   0x9005             STR      R0,[SP, #+20]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF000 0x81F2      BEQ.W    ??printk_1
    215              {
    216                  /*
    217                   * All formats begin with a '%' marker.  Special chars like
    218                   * '\n' or '\t' are normally converted to the appropriate
    219                   * character by the __compiler__.  Thus, no need for this
    220                   * routine to account for the '\' character.
    221                   */
    222                  if (c != '%')
   \   0000001E   0x9805             LDR      R0,[SP, #+20]
   \   00000020   0x2825             CMP      R0,#+37
   \   00000022   0xD013             BEQ.N    ??printk_2
    223                  {
    224                      /*
    225                       * This needs to be replaced with something like
    226                       * 'out_char()' or call an OS routine.
    227                       */
    228          #ifndef UNIX_DEBUG
    229                      if (c != '\n')
   \   00000024   0x9805             LDR      R0,[SP, #+20]
   \   00000026   0x280A             CMP      R0,#+10
   \   00000028   0xD005             BEQ.N    ??printk_3
    230                      {
    231                          printk_putc(c, &count, info);
   \   0000002A   0x0022             MOVS     R2,R4
   \   0000002C   0xA900             ADD      R1,SP,#+0
   \   0000002E   0x9805             LDR      R0,[SP, #+20]
   \   00000030   0x.... 0x....      BL       printk_putc
   \   00000034   0xE009             B.N      ??printk_4
    232                      }
    233                      else
    234                      {
    235                          printk_putc(0x0D /* CR */, &count, info);
   \                     ??printk_3:
   \   00000036   0x0022             MOVS     R2,R4
   \   00000038   0xA900             ADD      R1,SP,#+0
   \   0000003A   0x200D             MOVS     R0,#+13
   \   0000003C   0x.... 0x....      BL       printk_putc
    236                          printk_putc(0x0A /* LF */, &count, info);
   \   00000040   0x0022             MOVS     R2,R4
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x200A             MOVS     R0,#+10
   \   00000046   0x.... 0x....      BL       printk_putc
    237                      }
    238          #else
    239                      printk_putc(c, &count, info);
    240          #endif
    241          
    242                      /*
    243                       * By using 'continue', the next iteration of the loop
    244                       * is used, skipping the code that follows.
    245                       */
    246                      continue;
   \                     ??printk_4:
   \   0000004A   0xE1D7             B.N      ??printk_5
    247                  }
    248          
    249                  /*
    250                   * First check for specification modifier flags.
    251                   */
    252                  flags_used = 0;
   \                     ??printk_2:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x4681             MOV      R9,R0
    253                  done = FALSE;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x9003             STR      R0,[SP, #+12]
    254                  while (!done)
   \                     ??printk_6:
   \   00000054   0x9803             LDR      R0,[SP, #+12]
   \   00000056   0x2800             CMP      R0,#+0
   \   00000058   0xD122             BNE.N    ??printk_7
    255                  {
    256                      switch (/* c = */ *++p)
   \   0000005A   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000005E   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000062   0x2820             CMP      R0,#+32
   \   00000064   0xD00E             BEQ.N    ??printk_8
   \   00000066   0x2823             CMP      R0,#+35
   \   00000068   0xD012             BEQ.N    ??printk_9
   \   0000006A   0x282B             CMP      R0,#+43
   \   0000006C   0xD007             BEQ.N    ??printk_10
   \   0000006E   0x282D             CMP      R0,#+45
   \   00000070   0xD002             BEQ.N    ??printk_11
   \   00000072   0x2830             CMP      R0,#+48
   \   00000074   0xD009             BEQ.N    ??printk_12
   \   00000076   0xE00E             B.N      ??printk_13
    257                      {
    258                          case '-':
    259                              flags_used |= FLAGS_MINUS;
   \                     ??printk_11:
   \   00000078   0xF059 0x0901      ORRS     R9,R9,#0x1
    260                              break;
   \   0000007C   0xE7EA             B.N      ??printk_6
    261                          case '+':
    262                              flags_used |= FLAGS_PLUS;
   \                     ??printk_10:
   \   0000007E   0xF059 0x0902      ORRS     R9,R9,#0x2
    263                              break;
   \   00000082   0xE7E7             B.N      ??printk_6
    264                          case ' ':
    265                              flags_used |= FLAGS_SPACE;
   \                     ??printk_8:
   \   00000084   0xF059 0x0904      ORRS     R9,R9,#0x4
    266                              break;
   \   00000088   0xE7E4             B.N      ??printk_6
    267                          case '0':
    268                              flags_used |= FLAGS_ZERO;
   \                     ??printk_12:
   \   0000008A   0xF059 0x0908      ORRS     R9,R9,#0x8
    269                              break;
   \   0000008E   0xE7E1             B.N      ??printk_6
    270                          case '#':
    271                              flags_used |= FLAGS_POUND;
   \                     ??printk_9:
   \   00000090   0xF059 0x0910      ORRS     R9,R9,#0x10
    272                              break;
   \   00000094   0xE7DE             B.N      ??printk_6
    273                          default:
    274                              /* we've gone one char too far */
    275                              --p;
   \                     ??printk_13:
   \   00000096   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    276                              done = TRUE;
   \   0000009A   0x2001             MOVS     R0,#+1
   \   0000009C   0x9003             STR      R0,[SP, #+12]
    277                              break;
   \   0000009E   0xE7D9             B.N      ??printk_6
    278                      }
    279                  }
    280          
    281                  /*
    282                   * Next check for minimum field width.
    283                   */
    284                  field_width = 0;
   \                     ??printk_7:
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0x4682             MOV      R10,R0
    285                  done = FALSE;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x9003             STR      R0,[SP, #+12]
    286                  while (!done)
   \                     ??printk_14:
   \   000000A8   0x9803             LDR      R0,[SP, #+12]
   \   000000AA   0x2800             CMP      R0,#+0
   \   000000AC   0xD113             BNE.N    ??printk_15
    287                  {
    288                      switch (c = *++p)
   \   000000AE   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000B2   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000B6   0x9005             STR      R0,[SP, #+20]
   \   000000B8   0x3830             SUBS     R0,R0,#+48
   \   000000BA   0x2809             CMP      R0,#+9
   \   000000BC   0xD806             BHI.N    ??printk_16
    289                      {
    290                          case '0':
    291                          case '1':
    292                          case '2':
    293                          case '3':
    294                          case '4':
    295                          case '5':
    296                          case '6':
    297                          case '7':
    298                          case '8':
    299                          case '9':
    300                              field_width = (field_width * 10) + (c - '0');
   \                     ??printk_17:
   \   000000BE   0x200A             MOVS     R0,#+10
   \   000000C0   0x9905             LDR      R1,[SP, #+20]
   \   000000C2   0xFB00 0x100A      MLA      R0,R0,R10,R1
   \   000000C6   0xF1B0 0x0A30      SUBS     R10,R0,#+48
    301                              break;
   \   000000CA   0xE7ED             B.N      ??printk_14
    302                          default:
    303                              /* we've gone one char too far */
    304                              --p;
   \                     ??printk_16:
   \   000000CC   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    305                              done = TRUE;
   \   000000D0   0x2001             MOVS     R0,#+1
   \   000000D2   0x9003             STR      R0,[SP, #+12]
    306                              break;
   \   000000D4   0xE7E8             B.N      ??printk_14
    307                      }
    308                  }
    309          
    310                  /*
    311                   * Next check for the width and precision field separator.
    312                   */
    313                  if (/* (c = *++p) */ *++p == '.')
   \                     ??printk_15:
   \   000000D6   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000DA   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000DE   0x282E             CMP      R0,#+46
   \   000000E0   0xD111             BNE.N    ??printk_18
    314                  {
    315                      /* precision_used = TRUE; */
    316          
    317                      /*
    318                       * Must get precision field width, if present.
    319                       */
    320                      /* precision_width = 0; */
    321                      done = FALSE;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x9003             STR      R0,[SP, #+12]
    322                      while (!done)
   \                     ??printk_19:
   \   000000E6   0x9803             LDR      R0,[SP, #+12]
   \   000000E8   0x2800             CMP      R0,#+0
   \   000000EA   0xD10E             BNE.N    ??printk_20
    323                      {
    324                          switch (/* c = uncomment if used below */ *++p)
   \   000000EC   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   000000F0   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   000000F4   0x3830             SUBS     R0,R0,#+48
   \   000000F6   0x2809             CMP      R0,#+9
   \   000000F8   0xD800             BHI.N    ??printk_21
    325                          {
    326                              case '0':
    327                              case '1':
    328                              case '2':
    329                              case '3':
    330                              case '4':
    331                              case '5':
    332                              case '6':
    333                              case '7':
    334                              case '8':
    335                              case '9':
    336          #if 0
    337                                  precision_width = (precision_width * 10) +
    338                                      (c - '0');
    339          #endif
    340                                  break;
   \                     ??printk_22:
   \   000000FA   0xE7F4             B.N      ??printk_19
    341                              default:
    342                                  /* we've gone one char too far */
    343                                  --p;
   \                     ??printk_21:
   \   000000FC   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    344                                  done = TRUE;
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0x9003             STR      R0,[SP, #+12]
    345                                  break;
   \   00000104   0xE7EF             B.N      ??printk_19
    346                          }
    347                      }
    348                  }
    349                  else
    350                  {
    351                      /* we've gone one char too far */
    352                      --p;
   \                     ??printk_18:
   \   00000106   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    353          #if 0
    354                      precision_used = FALSE;
    355                      precision_width = 0;
    356          #endif
    357                  }
    358          
    359                  /*
    360                   * Check for the length modifier.
    361                   */
    362                  /* length_modifier = 0; */
    363                  switch (/* c = */ *++p)
   \                     ??printk_20:
   \   0000010A   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000010E   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000112   0x284C             CMP      R0,#+76
   \   00000114   0xD006             BEQ.N    ??printk_23
   \   00000116   0x2868             CMP      R0,#+104
   \   00000118   0xD002             BEQ.N    ??printk_24
   \   0000011A   0x286C             CMP      R0,#+108
   \   0000011C   0xD001             BEQ.N    ??printk_25
   \   0000011E   0xE002             B.N      ??printk_26
    364                  {
    365                      case 'h':
    366                          /* length_modifier |= LENMOD_h; */
    367                          break;
   \                     ??printk_24:
   \   00000120   0xE003             B.N      ??printk_27
    368                      case 'l':
    369                          /* length_modifier |= LENMOD_l; */
    370                          break;
   \                     ??printk_25:
   \   00000122   0xE002             B.N      ??printk_27
    371                      case 'L':
    372                          /* length_modifier |= LENMOD_L; */
    373                          break;
   \                     ??printk_23:
   \   00000124   0xE001             B.N      ??printk_27
    374                      default:
    375                          /* we've gone one char too far */
    376                          --p;
   \                     ??printk_26:
   \   00000126   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    377                          break;
    378                  }
    379          
    380                  /*
    381                   * Now we're ready to examine the format.
    382                   */
    383                  switch (c = *++p)
   \                     ??printk_27:
   \   0000012A   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   0000012E   0xF89B 0x0000      LDRB     R0,[R11, #+0]
   \   00000132   0x9005             STR      R0,[SP, #+20]
   \   00000134   0x2858             CMP      R0,#+88
   \   00000136   0xD075             BEQ.N    ??printk_28
   \   00000138   0x2862             CMP      R0,#+98
   \   0000013A   0xF000 0x80D5      BEQ.W    ??printk_29
   \   0000013E   0x2863             CMP      R0,#+99
   \   00000140   0xF000 0x811D      BEQ.W    ??printk_30
   \   00000144   0x2864             CMP      R0,#+100
   \   00000146   0xD013             BEQ.N    ??printk_31
   \   00000148   0x2869             CMP      R0,#+105
   \   0000014A   0xD011             BEQ.N    ??printk_31
   \   0000014C   0x286E             CMP      R0,#+110
   \   0000014E   0xF000 0x8149      BEQ.W    ??printk_32
   \   00000152   0x286F             CMP      R0,#+111
   \   00000154   0xF000 0x80BD      BEQ.W    ??printk_33
   \   00000158   0x2870             CMP      R0,#+112
   \   0000015A   0xF000 0x80D0      BEQ.W    ??printk_34
   \   0000015E   0x2873             CMP      R0,#+115
   \   00000160   0xF000 0x8116      BEQ.W    ??printk_35
   \   00000164   0x2875             CMP      R0,#+117
   \   00000166   0xF000 0x80D5      BEQ.W    ??printk_36
   \   0000016A   0x2878             CMP      R0,#+120
   \   0000016C   0xD05A             BEQ.N    ??printk_28
   \   0000016E   0xE140             B.N      ??printk_37
    384                  {
    385                      case 'd':
    386                      case 'i':
    387                          ival = (int)va_arg(ap, int);
   \                     ??printk_31:
   \   00000170   0x6828             LDR      R0,[R5, #+0]
   \   00000172   0x9006             STR      R0,[SP, #+24]
   \   00000174   0x1D2D             ADDS     R5,R5,#+4
    388                          vlen = printk_mknumstr(vstr,&ival,TRUE,10);
   \   00000176   0x230A             MOVS     R3,#+10
   \   00000178   0x2201             MOVS     R2,#+1
   \   0000017A   0xA906             ADD      R1,SP,#+24
   \   0000017C   0xA809             ADD      R0,SP,#+36
   \   0000017E   0x.... 0x....      BL       printk_mknumstr
   \   00000182   0x0007             MOVS     R7,R0
    389                          vstrp = &vstr[vlen];
   \   00000184   0xA809             ADD      R0,SP,#+36
   \   00000186   0x1838             ADDS     R0,R7,R0
   \   00000188   0x0006             MOVS     R6,R0
    390          
    391                          if (ival < 0)
   \   0000018A   0x9806             LDR      R0,[SP, #+24]
   \   0000018C   0x2800             CMP      R0,#+0
   \   0000018E   0xD503             BPL.N    ??printk_38
    392                          {
    393                              schar = '-';
   \   00000190   0x202D             MOVS     R0,#+45
   \   00000192   0x9002             STR      R0,[SP, #+8]
    394                              ++vlen;
   \   00000194   0x1C7F             ADDS     R7,R7,#+1
   \   00000196   0xE00F             B.N      ??printk_39
    395                          }
    396                          else
    397                          {
    398                              if (IS_FLAG_PLUS(flags_used))
   \                     ??printk_38:
   \   00000198   0x4648             MOV      R0,R9
   \   0000019A   0x0780             LSLS     R0,R0,#+30
   \   0000019C   0xD503             BPL.N    ??printk_40
    399                              {
    400                                  schar = '+';
   \   0000019E   0x202B             MOVS     R0,#+43
   \   000001A0   0x9002             STR      R0,[SP, #+8]
    401                                  ++vlen;
   \   000001A2   0x1C7F             ADDS     R7,R7,#+1
   \   000001A4   0xE008             B.N      ??printk_39
    402                              }
    403                              else
    404                              {
    405                                  if (IS_FLAG_SPACE(flags_used))
   \                     ??printk_40:
   \   000001A6   0x4648             MOV      R0,R9
   \   000001A8   0x0740             LSLS     R0,R0,#+29
   \   000001AA   0xD503             BPL.N    ??printk_41
    406                                  {
    407                                      schar = ' ';
   \   000001AC   0x2020             MOVS     R0,#+32
   \   000001AE   0x9002             STR      R0,[SP, #+8]
    408                                      ++vlen;
   \   000001B0   0x1C7F             ADDS     R7,R7,#+1
   \   000001B2   0xE001             B.N      ??printk_39
    409                                  }
    410                                  else
    411                                  {
    412                                      schar = 0;
   \                     ??printk_41:
   \   000001B4   0x2000             MOVS     R0,#+0
   \   000001B6   0x9002             STR      R0,[SP, #+8]
    413                                  }
    414                              }
    415                          }
    416                          dschar = FALSE;
   \                     ??printk_39:
   \   000001B8   0x2000             MOVS     R0,#+0
   \   000001BA   0x9004             STR      R0,[SP, #+16]
    417                      
    418                          /*
    419                           * do the ZERO pad.
    420                           */
    421                          if (IS_FLAG_ZERO(flags_used))
   \   000001BC   0x4648             MOV      R0,R9
   \   000001BE   0x0700             LSLS     R0,R0,#+28
   \   000001C0   0xD511             BPL.N    ??printk_42
    422                          {
    423                              if (schar)
   \   000001C2   0x9802             LDR      R0,[SP, #+8]
   \   000001C4   0x2800             CMP      R0,#+0
   \   000001C6   0xD004             BEQ.N    ??printk_43
    424                                  printk_putc(schar, &count, info);
   \   000001C8   0x0022             MOVS     R2,R4
   \   000001CA   0xA900             ADD      R1,SP,#+0
   \   000001CC   0x9802             LDR      R0,[SP, #+8]
   \   000001CE   0x.... 0x....      BL       printk_putc
    425                              dschar = TRUE;
   \                     ??printk_43:
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0x9004             STR      R0,[SP, #+16]
    426                      
    427                              printk_pad_zero (vlen, field_width, &count, info);
   \   000001D6   0x0023             MOVS     R3,R4
   \   000001D8   0xAA00             ADD      R2,SP,#+0
   \   000001DA   0x4651             MOV      R1,R10
   \   000001DC   0x0038             MOVS     R0,R7
   \   000001DE   0x.... 0x....      BL       printk_pad_zero
    428                              vlen = field_width;
   \   000001E2   0x4657             MOV      R7,R10
   \   000001E4   0xE012             B.N      ??printk_44
    429                          }
    430                          else
    431                          {
    432                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_42:
   \   000001E6   0x4648             MOV      R0,R9
   \   000001E8   0x07C0             LSLS     R0,R0,#+31
   \   000001EA   0xD40F             BMI.N    ??printk_44
    433                              {
    434                                  printk_pad_space (vlen, field_width, &count, info);
   \   000001EC   0x0023             MOVS     R3,R4
   \   000001EE   0xAA00             ADD      R2,SP,#+0
   \   000001F0   0x4651             MOV      R1,R10
   \   000001F2   0x0038             MOVS     R0,R7
   \   000001F4   0x.... 0x....      BL       printk_pad_space
    435                      
    436                                  if (schar)
   \   000001F8   0x9802             LDR      R0,[SP, #+8]
   \   000001FA   0x2800             CMP      R0,#+0
   \   000001FC   0xD004             BEQ.N    ??printk_45
    437                                      printk_putc(schar, &count, info);
   \   000001FE   0x0022             MOVS     R2,R4
   \   00000200   0xA900             ADD      R1,SP,#+0
   \   00000202   0x9802             LDR      R0,[SP, #+8]
   \   00000204   0x.... 0x....      BL       printk_putc
    438                                  dschar = TRUE;
   \                     ??printk_45:
   \   00000208   0x2001             MOVS     R0,#+1
   \   0000020A   0x9004             STR      R0,[SP, #+16]
    439                              }
    440                          }
    441                      
    442                          /* the string was built in reverse order, now display in */
    443                          /* correct order */
    444                          if (!dschar && schar)
   \                     ??printk_44:
   \   0000020C   0x9804             LDR      R0,[SP, #+16]
   \   0000020E   0x2800             CMP      R0,#+0
   \   00000210   0xD107             BNE.N    ??printk_46
   \   00000212   0x9802             LDR      R0,[SP, #+8]
   \   00000214   0x2800             CMP      R0,#+0
   \   00000216   0xD004             BEQ.N    ??printk_46
    445                          {
    446                              printk_putc(schar, &count, info);
   \   00000218   0x0022             MOVS     R2,R4
   \   0000021A   0xA900             ADD      R1,SP,#+0
   \   0000021C   0x9802             LDR      R0,[SP, #+8]
   \   0000021E   0x.... 0x....      BL       printk_putc
    447                          }
    448                          goto cont_xd;
   \                     ??printk_46:
   \   00000222   0xE098             B.N      ??printk_47
    449          
    450                      case 'x':
    451                      case 'X':
    452                          uval = (unsigned int)va_arg(ap, unsigned int);
   \                     ??printk_28:
   \   00000224   0x6828             LDR      R0,[R5, #+0]
   \   00000226   0x9001             STR      R0,[SP, #+4]
   \   00000228   0x1D2D             ADDS     R5,R5,#+4
    453                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \   0000022A   0x2310             MOVS     R3,#+16
   \   0000022C   0x2200             MOVS     R2,#+0
   \   0000022E   0xA901             ADD      R1,SP,#+4
   \   00000230   0xA809             ADD      R0,SP,#+36
   \   00000232   0x.... 0x....      BL       printk_mknumstr
   \   00000236   0x0007             MOVS     R7,R0
    454                          vstrp = &vstr[vlen];
   \   00000238   0xA809             ADD      R0,SP,#+36
   \   0000023A   0x1838             ADDS     R0,R7,R0
   \   0000023C   0x0006             MOVS     R6,R0
    455          
    456                          dschar = FALSE;
   \   0000023E   0x2000             MOVS     R0,#+0
   \   00000240   0x9004             STR      R0,[SP, #+16]
    457                          if (IS_FLAG_ZERO(flags_used))
   \   00000242   0x4648             MOV      R0,R9
   \   00000244   0x0700             LSLS     R0,R0,#+28
   \   00000246   0xD516             BPL.N    ??printk_48
    458                          {
    459                              if (IS_FLAG_POUND(flags_used))
   \   00000248   0x4648             MOV      R0,R9
   \   0000024A   0x06C0             LSLS     R0,R0,#+27
   \   0000024C   0xD50B             BPL.N    ??printk_49
    460                              {
    461                                  printk_putc('0', &count, info);
   \   0000024E   0x0022             MOVS     R2,R4
   \   00000250   0xA900             ADD      R1,SP,#+0
   \   00000252   0x2030             MOVS     R0,#+48
   \   00000254   0x.... 0x....      BL       printk_putc
    462                                  printk_putc('x', &count, info);
   \   00000258   0x0022             MOVS     R2,R4
   \   0000025A   0xA900             ADD      R1,SP,#+0
   \   0000025C   0x2078             MOVS     R0,#+120
   \   0000025E   0x.... 0x....      BL       printk_putc
    463                                  /*vlen += 2;*/
    464                                  dschar = TRUE;
   \   00000262   0x2001             MOVS     R0,#+1
   \   00000264   0x9004             STR      R0,[SP, #+16]
    465                              }
    466                              printk_pad_zero (vlen, field_width, &count, info);
   \                     ??printk_49:
   \   00000266   0x0023             MOVS     R3,R4
   \   00000268   0xAA00             ADD      R2,SP,#+0
   \   0000026A   0x4651             MOV      R1,R10
   \   0000026C   0x0038             MOVS     R0,R7
   \   0000026E   0x.... 0x....      BL       printk_pad_zero
    467                              vlen = field_width;
   \   00000272   0x4657             MOV      R7,R10
   \   00000274   0xE01B             B.N      ??printk_50
    468                          }
    469                          else
    470                          {
    471                              if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_48:
   \   00000276   0x4648             MOV      R0,R9
   \   00000278   0x07C0             LSLS     R0,R0,#+31
   \   0000027A   0xD418             BMI.N    ??printk_50
    472                              {
    473                                  if (IS_FLAG_POUND(flags_used))
   \   0000027C   0x4648             MOV      R0,R9
   \   0000027E   0x06C0             LSLS     R0,R0,#+27
   \   00000280   0xD500             BPL.N    ??printk_51
    474                                  {
    475                                      vlen += 2;
   \   00000282   0x1CBF             ADDS     R7,R7,#+2
    476                                  }
    477                                  printk_pad_space (vlen, field_width, &count, info);
   \                     ??printk_51:
   \   00000284   0x0023             MOVS     R3,R4
   \   00000286   0xAA00             ADD      R2,SP,#+0
   \   00000288   0x4651             MOV      R1,R10
   \   0000028A   0x0038             MOVS     R0,R7
   \   0000028C   0x.... 0x....      BL       printk_pad_space
    478                                  if (IS_FLAG_POUND(flags_used))
   \   00000290   0x4648             MOV      R0,R9
   \   00000292   0x06C0             LSLS     R0,R0,#+27
   \   00000294   0xD50B             BPL.N    ??printk_50
    479                                  {
    480                                      printk_putc('0', &count, info);
   \   00000296   0x0022             MOVS     R2,R4
   \   00000298   0xA900             ADD      R1,SP,#+0
   \   0000029A   0x2030             MOVS     R0,#+48
   \   0000029C   0x.... 0x....      BL       printk_putc
    481                                      printk_putc('x', &count, info);
   \   000002A0   0x0022             MOVS     R2,R4
   \   000002A2   0xA900             ADD      R1,SP,#+0
   \   000002A4   0x2078             MOVS     R0,#+120
   \   000002A6   0x.... 0x....      BL       printk_putc
    482                                      dschar = TRUE;
   \   000002AA   0x2001             MOVS     R0,#+1
   \   000002AC   0x9004             STR      R0,[SP, #+16]
    483                                  }
    484                              }
    485                          }
    486          
    487                          if ((IS_FLAG_POUND(flags_used)) && !dschar)
   \                     ??printk_50:
   \   000002AE   0x4648             MOV      R0,R9
   \   000002B0   0x06C0             LSLS     R0,R0,#+27
   \   000002B2   0xD50D             BPL.N    ??printk_52
   \   000002B4   0x9804             LDR      R0,[SP, #+16]
   \   000002B6   0x2800             CMP      R0,#+0
   \   000002B8   0xD10A             BNE.N    ??printk_52
    488                          {
    489                              printk_putc('0', &count, info);
   \   000002BA   0x0022             MOVS     R2,R4
   \   000002BC   0xA900             ADD      R1,SP,#+0
   \   000002BE   0x2030             MOVS     R0,#+48
   \   000002C0   0x.... 0x....      BL       printk_putc
    490                              printk_putc('x', &count, info);
   \   000002C4   0x0022             MOVS     R2,R4
   \   000002C6   0xA900             ADD      R1,SP,#+0
   \   000002C8   0x2078             MOVS     R0,#+120
   \   000002CA   0x.... 0x....      BL       printk_putc
    491                              vlen += 2;
   \   000002CE   0x1CBF             ADDS     R7,R7,#+2
    492                          }
    493                          goto cont_xd;
   \                     ??printk_52:
   \   000002D0   0xE041             B.N      ??printk_47
    494          
    495                      case 'o':
    496                          uval = (unsigned int)va_arg(ap, unsigned int);
   \                     ??printk_33:
   \   000002D2   0x6828             LDR      R0,[R5, #+0]
   \   000002D4   0x9001             STR      R0,[SP, #+4]
   \   000002D6   0x1D2D             ADDS     R5,R5,#+4
    497                          vlen = printk_mknumstr(vstr,&uval,FALSE,8);
   \   000002D8   0x2308             MOVS     R3,#+8
   \   000002DA   0x2200             MOVS     R2,#+0
   \   000002DC   0xA901             ADD      R1,SP,#+4
   \   000002DE   0xA809             ADD      R0,SP,#+36
   \   000002E0   0x.... 0x....      BL       printk_mknumstr
   \   000002E4   0x0007             MOVS     R7,R0
    498                          goto cont_u;
   \   000002E6   0xE01F             B.N      ??printk_53
    499                      case 'b':
    500                          uval = (unsigned int)va_arg(ap, unsigned int);
   \                     ??printk_29:
   \   000002E8   0x6828             LDR      R0,[R5, #+0]
   \   000002EA   0x9001             STR      R0,[SP, #+4]
   \   000002EC   0x1D2D             ADDS     R5,R5,#+4
    501                          vlen = printk_mknumstr(vstr,&uval,FALSE,2);
   \   000002EE   0x2302             MOVS     R3,#+2
   \   000002F0   0x2200             MOVS     R2,#+0
   \   000002F2   0xA901             ADD      R1,SP,#+4
   \   000002F4   0xA809             ADD      R0,SP,#+36
   \   000002F6   0x.... 0x....      BL       printk_mknumstr
   \   000002FA   0x0007             MOVS     R7,R0
    502                          goto cont_u;
   \   000002FC   0xE014             B.N      ??printk_53
    503                      case 'p':
    504                          uval = (unsigned int)va_arg(ap, void *);
   \                     ??printk_34:
   \   000002FE   0x6828             LDR      R0,[R5, #+0]
   \   00000300   0x9001             STR      R0,[SP, #+4]
   \   00000302   0x1D2D             ADDS     R5,R5,#+4
    505                          vlen = printk_mknumstr(vstr,&uval,FALSE,16);
   \   00000304   0x2310             MOVS     R3,#+16
   \   00000306   0x2200             MOVS     R2,#+0
   \   00000308   0xA901             ADD      R1,SP,#+4
   \   0000030A   0xA809             ADD      R0,SP,#+36
   \   0000030C   0x.... 0x....      BL       printk_mknumstr
   \   00000310   0x0007             MOVS     R7,R0
    506                          goto cont_u;
   \   00000312   0xE009             B.N      ??printk_53
    507                      case 'u':
    508                          uval = (unsigned int)va_arg(ap, unsigned int);
   \                     ??printk_36:
   \   00000314   0x6828             LDR      R0,[R5, #+0]
   \   00000316   0x9001             STR      R0,[SP, #+4]
   \   00000318   0x1D2D             ADDS     R5,R5,#+4
    509                          vlen = printk_mknumstr(vstr,&uval,FALSE,10);
   \   0000031A   0x230A             MOVS     R3,#+10
   \   0000031C   0x2200             MOVS     R2,#+0
   \   0000031E   0xA901             ADD      R1,SP,#+4
   \   00000320   0xA809             ADD      R0,SP,#+36
   \   00000322   0x.... 0x....      BL       printk_mknumstr
   \   00000326   0x0007             MOVS     R7,R0
    510          
    511                          cont_u:
    512                              vstrp = &vstr[vlen];
   \                     ??printk_53:
   \   00000328   0xA809             ADD      R0,SP,#+36
   \   0000032A   0x1838             ADDS     R0,R7,R0
   \   0000032C   0x0006             MOVS     R6,R0
    513          
    514                              if (IS_FLAG_ZERO(flags_used))
   \   0000032E   0x4648             MOV      R0,R9
   \   00000330   0x0700             LSLS     R0,R0,#+28
   \   00000332   0xD507             BPL.N    ??printk_54
    515                              {
    516                                  printk_pad_zero (vlen, field_width, &count, info);
   \   00000334   0x0023             MOVS     R3,R4
   \   00000336   0xAA00             ADD      R2,SP,#+0
   \   00000338   0x4651             MOV      R1,R10
   \   0000033A   0x0038             MOVS     R0,R7
   \   0000033C   0x.... 0x....      BL       printk_pad_zero
    517                                  vlen = field_width;
   \   00000340   0x4657             MOV      R7,R10
   \   00000342   0xE008             B.N      ??printk_47
    518                              }
    519                              else
    520                              {
    521                                  if (!IS_FLAG_MINUS(flags_used))
   \                     ??printk_54:
   \   00000344   0x4648             MOV      R0,R9
   \   00000346   0x07C0             LSLS     R0,R0,#+31
   \   00000348   0xD405             BMI.N    ??printk_47
    522                                  {
    523                                      printk_pad_space (vlen, field_width, &count, info);
   \   0000034A   0x0023             MOVS     R3,R4
   \   0000034C   0xAA00             ADD      R2,SP,#+0
   \   0000034E   0x4651             MOV      R1,R10
   \   00000350   0x0038             MOVS     R0,R7
   \   00000352   0x.... 0x....      BL       printk_pad_space
    524                                  }
    525                              }
    526          
    527                          cont_xd:
    528                              while (*vstrp)
   \                     ??printk_47:
   \   00000356   0x7830             LDRB     R0,[R6, #+0]
   \   00000358   0x2800             CMP      R0,#+0
   \   0000035A   0xD006             BEQ.N    ??printk_55
    529                                  printk_putc(*vstrp--, &count, info);
   \   0000035C   0x0022             MOVS     R2,R4
   \   0000035E   0xA900             ADD      R1,SP,#+0
   \   00000360   0x7830             LDRB     R0,[R6, #+0]
   \   00000362   0x.... 0x....      BL       printk_putc
   \   00000366   0x1E76             SUBS     R6,R6,#+1
   \   00000368   0xE7F5             B.N      ??printk_47
    530          
    531                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_55:
   \   0000036A   0x4648             MOV      R0,R9
   \   0000036C   0x07C0             LSLS     R0,R0,#+31
   \   0000036E   0xD505             BPL.N    ??printk_56
    532                              {
    533                                  printk_pad_space (vlen, field_width, &count, info);
   \   00000370   0x0023             MOVS     R3,R4
   \   00000372   0xAA00             ADD      R2,SP,#+0
   \   00000374   0x4651             MOV      R1,R10
   \   00000376   0x0038             MOVS     R0,R7
   \   00000378   0x.... 0x....      BL       printk_pad_space
    534                              }
    535                          break;
   \                     ??printk_56:
   \   0000037C   0xE03E             B.N      ??printk_5
    536          
    537                      case 'c':
    538                          cval = (char)va_arg(ap, unsigned int);
   \                     ??printk_30:
   \   0000037E   0x7828             LDRB     R0,[R5, #+0]
   \   00000380   0x9007             STR      R0,[SP, #+28]
   \   00000382   0x1D2D             ADDS     R5,R5,#+4
    539                          printk_putc(cval,&count, info);
   \   00000384   0x0022             MOVS     R2,R4
   \   00000386   0xA900             ADD      R1,SP,#+0
   \   00000388   0x9807             LDR      R0,[SP, #+28]
   \   0000038A   0x.... 0x....      BL       printk_putc
    540                          break;
   \   0000038E   0xE035             B.N      ??printk_5
    541                      case 's':
    542                          sval = (char *)va_arg(ap, char *);
   \                     ??printk_35:
   \   00000390   0x6828             LDR      R0,[R5, #+0]
   \   00000392   0x4680             MOV      R8,R0
   \   00000394   0x1D2D             ADDS     R5,R5,#+4
    543                          if (sval)
   \   00000396   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000039A   0xD022             BEQ.N    ??printk_57
    544                          {
    545                              vlen = strlen(sval);
   \   0000039C   0x4640             MOV      R0,R8
   \   0000039E   0x.... 0x....      BL       strlen
   \   000003A2   0x0007             MOVS     R7,R0
    546                              if (!IS_FLAG_MINUS(flags_used))
   \   000003A4   0x4648             MOV      R0,R9
   \   000003A6   0x07C0             LSLS     R0,R0,#+31
   \   000003A8   0xD405             BMI.N    ??printk_58
    547                              {
    548                                  printk_pad_space (vlen, field_width, &count, info);
   \   000003AA   0x0023             MOVS     R3,R4
   \   000003AC   0xAA00             ADD      R2,SP,#+0
   \   000003AE   0x4651             MOV      R1,R10
   \   000003B0   0x0038             MOVS     R0,R7
   \   000003B2   0x.... 0x....      BL       printk_pad_space
    549                              }
    550                              while (*sval)
   \                     ??printk_58:
   \   000003B6   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000003BA   0x2800             CMP      R0,#+0
   \   000003BC   0xD008             BEQ.N    ??printk_59
    551                                  printk_putc(*sval++,&count, info);
   \   000003BE   0x0022             MOVS     R2,R4
   \   000003C0   0xA900             ADD      R1,SP,#+0
   \   000003C2   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000003C6   0x.... 0x....      BL       printk_putc
   \   000003CA   0xF118 0x0801      ADDS     R8,R8,#+1
   \   000003CE   0xE7F2             B.N      ??printk_58
    552                              if (IS_FLAG_MINUS(flags_used))
   \                     ??printk_59:
   \   000003D0   0x4648             MOV      R0,R9
   \   000003D2   0x07C0             LSLS     R0,R0,#+31
   \   000003D4   0xD505             BPL.N    ??printk_57
    553                              {
    554                                  printk_pad_space (vlen, field_width, &count, info);
   \   000003D6   0x0023             MOVS     R3,R4
   \   000003D8   0xAA00             ADD      R2,SP,#+0
   \   000003DA   0x4651             MOV      R1,R10
   \   000003DC   0x0038             MOVS     R0,R7
   \   000003DE   0x.... 0x....      BL       printk_pad_space
    555                              }
    556                          }
    557                          break;
   \                     ??printk_57:
   \   000003E2   0xE00B             B.N      ??printk_5
    558                      case 'n':
    559                          ivalp = (int *)va_arg(ap, int *);
   \                     ??printk_32:
   \   000003E4   0x6828             LDR      R0,[R5, #+0]
   \   000003E6   0x9008             STR      R0,[SP, #+32]
   \   000003E8   0x1D2D             ADDS     R5,R5,#+4
    560                          *ivalp = count;
   \   000003EA   0x9808             LDR      R0,[SP, #+32]
   \   000003EC   0x9900             LDR      R1,[SP, #+0]
   \   000003EE   0x6001             STR      R1,[R0, #+0]
    561                          break;
   \   000003F0   0xE004             B.N      ??printk_5
    562                      default:
    563                          printk_putc(c,&count, info);
   \                     ??printk_37:
   \   000003F2   0x0022             MOVS     R2,R4
   \   000003F4   0xA900             ADD      R1,SP,#+0
   \   000003F6   0x9805             LDR      R0,[SP, #+20]
   \   000003F8   0x.... 0x....      BL       printk_putc
    564                          break;
    565                  }
    566              }
   \                     ??printk_5:
   \   000003FC   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \   00000400   0xE607             B.N      ??printk_0
    567              return count;
   \                     ??printk_1:
   \   00000402   0x9800             LDR      R0,[SP, #+0]
   \   00000404   0xB013             ADD      SP,SP,#+76
   \   00000406   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    568          }
    569          
    570          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    571          int
    572          printf (const char *fmt, ...)
    573          {
   \                     printf:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB57E             PUSH     {R1-R6,LR}
   \   00000004   0x0004             MOVS     R4,R0
    574              va_list ap;
    575              int rvalue;
    576              PRINTK_INFO info;
    577          
    578          
    579              info.dest = DEST_CONSOLE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9000             STR      R0,[SP, #+0]
    580              info.func = &out_char;
   \   0000000A   0x....             LDR.N    R0,??DataTable0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    581              /*
    582               * Initialize the pointer to the variable length argument list.
    583               */
    584              va_start(ap, fmt);
   \   0000000E   0xA807             ADD      R0,SP,#+28
   \   00000010   0x0005             MOVS     R5,R0
    585              rvalue = printk(&info, fmt, ap);
   \   00000012   0x002A             MOVS     R2,R5
   \   00000014   0x0021             MOVS     R1,R4
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       printk
   \   0000001C   0x0006             MOVS     R6,R0
    586              /*
    587               * Cleanup the variable length argument list.
    588               */
    589              va_end(ap);
    590              return rvalue;
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0xBC7E             POP      {R1-R6}
   \   00000022   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    591          }
    592          
    593          /********************************************************************/

   \                                 In section .text, align 2, keep-with-next
    594          int
    595          sprintf (char *s, const char *fmt, ...)
    596          {
   \                     sprintf:
   \   00000000   0xB40C             PUSH     {R2,R3}
   \   00000002   0xB5FE             PUSH     {R1-R7,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    597              va_list ap;
    598              int rvalue = 0;
   \   00000008   0x2700             MOVS     R7,#+0
    599              PRINTK_INFO info;
    600          
    601              /*
    602               * Initialize the pointer to the variable length argument list.
    603               */
    604              if (s != 0)
   \   0000000A   0x2C00             CMP      R4,#+0
   \   0000000C   0xD00D             BEQ.N    ??sprintf_0
    605              {
    606                  info.dest = DEST_STRING;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0x9000             STR      R0,[SP, #+0]
    607                  info.loc = s;
   \   00000012   0x9402             STR      R4,[SP, #+8]
    608                  va_start(ap, fmt);
   \   00000014   0xA808             ADD      R0,SP,#+32
   \   00000016   0x0006             MOVS     R6,R0
    609                  rvalue = printk(&info, fmt, ap);
   \   00000018   0x0032             MOVS     R2,R6
   \   0000001A   0x0029             MOVS     R1,R5
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x.... 0x....      BL       printk
   \   00000022   0x0007             MOVS     R7,R0
    610                  *info.loc = '\0';
   \   00000024   0x9802             LDR      R0,[SP, #+8]
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    611                  va_end(ap);
    612              }
    613              return rvalue;
   \                     ??sprintf_0:
   \   0000002A   0x0038             MOVS     R0,R7
   \   0000002C   0xBCFE             POP      {R1-R7}
   \   0000002E   0xF85D 0xFB0C      LDR      PC,[SP], #+12    ;; return
    614          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     out_char
    615          
    616          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  printf
              40 -> printk
      112  printk
             112 -> printk_mknumstr
             112 -> printk_pad_space
             112 -> printk_pad_zero
             112 -> printk_putc
             112 -> strlen
       32  printk_mknumstr
       24  printk_pad_space
              24 -> printk_putc
       24  printk_pad_zero
              24 -> printk_putc
       16  printk_putc
              16 -- Indirect call
       40  sprintf
              40 -> printk


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      38  printf
    1034  printk
     170  printk_mknumstr
      38  printk_pad_space
      38  printk_pad_zero
      50  printk_putc
      50  sprintf

 
 1 422 bytes in section .text
 
 1 422 bytes of CODE memory

Errors: none
Warnings: none
