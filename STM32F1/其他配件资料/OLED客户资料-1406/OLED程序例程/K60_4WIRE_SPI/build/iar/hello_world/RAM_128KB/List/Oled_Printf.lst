###############################################################################
#                                                                             #
#                                                       07/May/2014  11:01:06 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\sr #
#                    c\drivers\OLED\Oled_Printf.c                             #
#    Command line =  C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\sr #
#                    c\drivers\OLED\Oled_Printf.c -D IAR -D TWR_K60N512 -lCN  #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\RAM_128KB\List\ -lB                  #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\RAM_128KB\List\ -o                   #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\RAM_128KB\Obj\ --no_cse --no_unroll  #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\projects\hello_world\   #
#                    -I C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED #
#                    \build\iar\hello_world\..\..\..\src\common\ -I           #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\cpu\ -I                 #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\cpu\headers\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\adc16\ -I       #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\enet\ -I        #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\pmc\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\rtc\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\lptmr\ -I       #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\uart\ -I        #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\mcg\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\wdog\ -I        #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\platforms\ -I           #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\ftm\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\SPI\ -I         #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\..\..\src\drivers\OLED\ -I        #
#                    C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\..\ -On --use_c++_inline             #
#    List file    =  C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\RAM_128KB\List\Oled_Printf.lst       #
#    Object file  =  C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\bu #
#                    ild\iar\hello_world\RAM_128KB\Obj\Oled_Printf.o          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED客户资料\KinetisK60_Demo_OLED\src\drivers\OLED\Oled_Printf.c
      1          /******************************************************************************
      2           * File Name   :  oledPrint.c
      3           * Author      :  43oh - - MSP430 News Projects and Forums.
      4           *             :  Modified version of printf provided by:
      5           *             :  oPossum[ http://www.43oh.com/forum/viewtopic.php?f=10&t=1732]
      6           * Description :  printf extension for the SSD1306 OLED
      7           * Date        :  October 21, 2011.
      8           *****************************************************************************/
      9          #include "stdarg.h"
     10          #include "stdio.h"
     11          #include "Oled_Config.h"
     12          #include "Oled_SSD1306.h"
     13          #include "Oled_Printf.h"
     14          
     15          
     16          
     17          
     18          static 	char column = 0;

   \                                 In section .bss, align 1
     19          static 	char row = 0;
   \                     row:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          static	char columnIncrementSmallFont = 0;
   \                     columnIncrementSmallFont:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     21          static	char columnIncrementLargeFont = 0;
   \                     columnIncrementLargeFont:
   \   00000000                      DS8 1
     22          static	enum e_columnIncrementFlag 

   \                                 In section .bss, align 1
     23          					columnIncrementFlag		 = NO_FONT;
   \                     columnIncrementFlag:
   \   00000000                      DS8 1
     24          

   \                                 In section .text, align 2, keep-with-next
     25          void putc(unsigned char character)
     26          {
   \                     putc:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     27             if (columnIncrementFlag == SMALL_FONT)
   \   00000006   0x....             LDR.N    R0,??DataTable3
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD10D             BNE.N    ??putc_0
     28             {
     29             	Fill_RAM_FONT_SMALL(character-32,columnIncrementSmallFont,row);
   \   0000000E   0x....             LDR.N    R0,??DataTable3_1
   \   00000010   0x7802             LDRB     R2,[R0, #+0]
   \   00000012   0x....             LDR.N    R0,??DataTable3_2
   \   00000014   0x7801             LDRB     R1,[R0, #+0]
   \   00000016   0xF1B4 0x0020      SUBS     R0,R4,#+32
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x.... 0x....      BL       Fill_RAM_FONT_SMALL
     30             	columnIncrementSmallFont = columnIncrementSmallFont+SMALL_FONT_WIDTH;
   \   00000020   0x....             LDR.N    R0,??DataTable3_2
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x1D40             ADDS     R0,R0,#+5
   \   00000026   0x....             LDR.N    R1,??DataTable3_2
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     31             }
     32          
     33             if (columnIncrementFlag == LARGE_FONT)
   \                     ??putc_0:
   \   0000002A   0x....             LDR.N    R0,??DataTable3
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD10F             BNE.N    ??putc_1
     34             {
     35             	Fill_RAM_FONT(character,columnIncrementLargeFont,row,LARGE_FONT_SPAN,LARGE_FONT_WIDTH);
   \   00000032   0x200E             MOVS     R0,#+14
   \   00000034   0x9000             STR      R0,[SP, #+0]
   \   00000036   0x2302             MOVS     R3,#+2
   \   00000038   0x....             LDR.N    R0,??DataTable3_1
   \   0000003A   0x7802             LDRB     R2,[R0, #+0]
   \   0000003C   0x....             LDR.N    R0,??DataTable3_3
   \   0000003E   0x7801             LDRB     R1,[R0, #+0]
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   0x.... 0x....      BL       Fill_RAM_FONT
     36             	columnIncrementLargeFont = columnIncrementLargeFont+LARGE_FONT_WIDTH;
   \   00000048   0x....             LDR.N    R0,??DataTable3_3
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x300E             ADDS     R0,R0,#+14
   \   0000004E   0x....             LDR.N    R1,??DataTable3_3
   \   00000050   0x7008             STRB     R0,[R1, #+0]
     37             }   	
     38          }
   \                     ??putc_1:
   \   00000052   0xBD13             POP      {R0,R1,R4,PC}    ;; return
     39          
     40          
     41          
     42          /****************************************************************************
     43          
     44          
     45          char setColumn, 选择开始的列
     46          
     47          char setRow,   选择开始显示的行
     48          
     49          char IncrementFlag  选择字符
     50          
     51          
     52          
     53          ***************************************************************************/
     54          
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void OLED_PrintfSetColumnRow(char setColumn, char setRow, char IncrementFlag)
     57          {
     58          	row = setRow;
   \                     OLED_PrintfSetColumnRow:
   \   00000000   0x....             LDR.N    R3,??DataTable3_1
   \   00000002   0x7019             STRB     R1,[R3, #+0]
     59          	columnIncrementFlag = (enum e_columnIncrementFlag)IncrementFlag;
   \   00000004   0x....             LDR.N    R3,??DataTable3
   \   00000006   0x701A             STRB     R2,[R3, #+0]
     60          	
     61          	if (columnIncrementFlag == SMALL_FONT)
   \   00000008   0x....             LDR.N    R3,??DataTable3
   \   0000000A   0x781B             LDRB     R3,[R3, #+0]
   \   0000000C   0x2B01             CMP      R3,#+1
   \   0000000E   0xD101             BNE.N    ??OLED_PrintfSetColumnRow_0
     62          		columnIncrementSmallFont = setColumn;
   \   00000010   0x....             LDR.N    R3,??DataTable3_2
   \   00000012   0x7018             STRB     R0,[R3, #+0]
     63          	
     64          	if (columnIncrementFlag == LARGE_FONT)
   \                     ??OLED_PrintfSetColumnRow_0:
   \   00000014   0x....             LDR.N    R3,??DataTable3
   \   00000016   0x781B             LDRB     R3,[R3, #+0]
   \   00000018   0x2B02             CMP      R3,#+2
   \   0000001A   0xD101             BNE.N    ??OLED_PrintfSetColumnRow_1
     65          		columnIncrementLargeFont = setColumn;  
   \   0000001C   0x....             LDR.N    R3,??DataTable3_3
   \   0000001E   0x7018             STRB     R0,[R3, #+0]
     66          }
   \                     ??OLED_PrintfSetColumnRow_1:
   \   00000020   0x4770             BX       LR               ;; return
     67          

   \                                 In section .rodata, align 4
     68          static const unsigned long dv[] = {
   \                     dv:
   \   00000000   0x3B9ACA00         DC32 1000000000, 100000000, 10000000, 1000000, 100000, 10000, 1000, 100
   \              0x05F5E100   
   \              0x00989680   
   \              0x000F4240   
   \              0x000186A0   
   \              0x00002710   
   \              0x000003E8   
   \              0x00000064   
   \   00000020   0x0000000A         DC32 10, 1
   \              0x00000001   
     69          //  4294967296      // 32 bit unsigned max
     70              1000000000,     // +0
     71               100000000,     // +1
     72                10000000,     // +2
     73                 1000000,     // +3
     74                  100000,     // +4
     75          //       65535      // 16 bit unsigned max     
     76                   10000,     // +5
     77                    1000,     // +6
     78                     100,     // +7
     79                      10,     // +8
     80                       1,     // +9
     81          };
     82          

   \                                 In section .text, align 2, keep-with-next
     83          static void xtoa(unsigned long x, const unsigned long *dp)
     84          {
   \                     xtoa:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
   \   00000004   0x000D             MOVS     R5,R1
     85              char c;
     86              unsigned long d;
     87              if(x) {
   \   00000006   0x2F00             CMP      R7,#+0
   \   00000008   0xD016             BEQ.N    ??xtoa_0
     88                  while(x < *dp) ++dp;
   \                     ??xtoa_1:
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0x4287             CMP      R7,R0
   \   0000000E   0xD201             BCS.N    ??xtoa_2
   \   00000010   0x1D2D             ADDS     R5,R5,#+4
   \   00000012   0xE7FA             B.N      ??xtoa_1
     89                  do {
     90                      d = *dp++;
   \                     ??xtoa_2:
   \   00000014   0x6828             LDR      R0,[R5, #+0]
   \   00000016   0x0004             MOVS     R4,R0
   \   00000018   0x1D2D             ADDS     R5,R5,#+4
     91                      c = '0';
   \   0000001A   0x2030             MOVS     R0,#+48
   \   0000001C   0x0006             MOVS     R6,R0
     92                      while(x >= d) ++c, x -= d;
   \                     ??xtoa_3:
   \   0000001E   0x42A7             CMP      R7,R4
   \   00000020   0xD302             BCC.N    ??xtoa_4
   \   00000022   0x1C76             ADDS     R6,R6,#+1
   \   00000024   0x1B3F             SUBS     R7,R7,R4
   \   00000026   0xE7FA             B.N      ??xtoa_3
     93                      putc(c);
   \                     ??xtoa_4:
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0x.... 0x....      BL       putc
     94                  } while(!(d & 1));
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x07C0             LSLS     R0,R0,#+31
   \   00000034   0xD403             BMI.N    ??xtoa_5
   \   00000036   0xE7ED             B.N      ??xtoa_2
     95              } else
     96                  putc('0');
   \                     ??xtoa_0:
   \   00000038   0x2030             MOVS     R0,#+48
   \   0000003A   0x.... 0x....      BL       putc
     97          }
   \                     ??xtoa_5:
   \   0000003E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     98          

   \                                 In section .text, align 2, keep-with-next
     99          static void puth(unsigned n)
    100          {
   \                     puth:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    101              static const char hex[16] = { '0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
    102              putc(hex[n & 15]);
   \   00000004   0xF014 0x000F      ANDS     R0,R4,#0xF
   \   00000008   0x....             LDR.N    R1,??DataTable3_4
   \   0000000A   0x5C40             LDRB     R0,[R0, R1]
   \   0000000C   0x.... 0x....      BL       putc
    103          }
   \   00000010   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .rodata, align 4
   \                     ??hex:
   \   00000000   0x30 0x31          DC8 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x41 0x42    
   \              0x43 0x44    
   \              0x45 0x46    
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void OLED_Printf(char *format, ...)
    106          {
   \                     OLED_Printf:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xE92D 0x41F8      PUSH     {R3-R8,LR}
   \   00000006   0x0004             MOVS     R4,R0
    107              char c;
    108              int i;
    109              long n;
    110              
    111              va_list a;
    112              va_start(a, format);
   \   00000008   0xA807             ADD      R0,SP,#+28
   \   0000000A   0x4680             MOV      R8,R0
    113              while(c = *format++) {
   \                     ??OLED_Printf_0:
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x1C64             ADDS     R4,R4,#+1
   \   00000010   0x0005             MOVS     R5,R0
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD065             BEQ.N    ??OLED_Printf_1
    114                  if(c == '%') {
   \   00000018   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000001A   0x2D25             CMP      R5,#+37
   \   0000001C   0xD15D             BNE.N    ??OLED_Printf_2
    115                      switch(c = *format++) {
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x1C64             ADDS     R4,R4,#+1
   \   00000022   0x0005             MOVS     R5,R0
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD056             BEQ.N    ??OLED_Printf_3
   \   0000002A   0x2863             CMP      R0,#+99
   \   0000002C   0xD015             BEQ.N    ??OLED_Printf_4
   \   0000002E   0x2864             CMP      R0,#+100
   \   00000030   0xD01A             BEQ.N    ??OLED_Printf_5
   \   00000032   0x2869             CMP      R0,#+105
   \   00000034   0xD018             BEQ.N    ??OLED_Printf_5
   \   00000036   0x286C             CMP      R0,#+108
   \   00000038   0xD029             BEQ.N    ??OLED_Printf_6
   \   0000003A   0x286E             CMP      R0,#+110
   \   0000003C   0xD027             BEQ.N    ??OLED_Printf_6
   \   0000003E   0x2873             CMP      R0,#+115
   \   00000040   0xD004             BEQ.N    ??OLED_Printf_7
   \   00000042   0x2875             CMP      R0,#+117
   \   00000044   0xD010             BEQ.N    ??OLED_Printf_5
   \   00000046   0x2878             CMP      R0,#+120
   \   00000048   0xD034             BEQ.N    ??OLED_Printf_8
   \   0000004A   0xE046             B.N      ??OLED_Printf_9
    116                          case 's':                       // String
    117                              puts(va_arg(a, char*));
   \                     ??OLED_Printf_7:
   \   0000004C   0x4640             MOV      R0,R8
   \   0000004E   0xF110 0x0804      ADDS     R8,R0,#+4
   \   00000052   0x6800             LDR      R0,[R0, #+0]
   \   00000054   0x.... 0x....      BL       puts
    118                              break;
   \   00000058   0xE7D8             B.N      ??OLED_Printf_0
    119                          case 'c':                       // Char
    120                              putc(va_arg(a, char));
   \                     ??OLED_Printf_4:
   \   0000005A   0xF118 0x0804      ADDS     R8,R8,#+4
   \   0000005E   0xF818 0x0C04      LDRB     R0,[R8, #-4]
   \   00000062   0x.... 0x....      BL       putc
    121                              break;
   \   00000066   0xE7D1             B.N      ??OLED_Printf_0
    122                          case 'i':                       // 16 bit Integer
    123                          case 'd':                       // 16 bit Integer
    124                          case 'u':                       // 16 bit Unsigned
    125                              i = va_arg(a, int);
   \                     ??OLED_Printf_5:
   \   00000068   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   0000006C   0x0006             MOVS     R6,R0
   \   0000006E   0xF118 0x0804      ADDS     R8,R8,#+4
    126                              if(c == 'i' && i < 0) i = -i, putc('-');
   \   00000072   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000074   0x2D69             CMP      R5,#+105
   \   00000076   0xD105             BNE.N    ??OLED_Printf_10
   \   00000078   0x2E00             CMP      R6,#+0
   \   0000007A   0xD503             BPL.N    ??OLED_Printf_10
   \   0000007C   0x4276             RSBS     R6,R6,#+0
   \   0000007E   0x202D             MOVS     R0,#+45
   \   00000080   0x.... 0x....      BL       putc
    127                              xtoa((unsigned)i, dv + 5);
   \                     ??OLED_Printf_10:
   \   00000084   0x....             LDR.N    R1,??DataTable3_5
   \   00000086   0x0030             MOVS     R0,R6
   \   00000088   0x.... 0x....      BL       xtoa
    128                              break;
   \   0000008C   0xE7BE             B.N      ??OLED_Printf_0
    129                          case 'l':                       // 32 bit Long
    130                          case 'n':                       // 32 bit uNsigned loNg
    131                              n = va_arg(a, long);
   \                     ??OLED_Printf_6:
   \   0000008E   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000092   0x0007             MOVS     R7,R0
   \   00000094   0xF118 0x0804      ADDS     R8,R8,#+4
    132                              if(c == 'l' &&  n < 0) n = -n, putc('-');
   \   00000098   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000009A   0x2D6C             CMP      R5,#+108
   \   0000009C   0xD105             BNE.N    ??OLED_Printf_11
   \   0000009E   0x2F00             CMP      R7,#+0
   \   000000A0   0xD503             BPL.N    ??OLED_Printf_11
   \   000000A2   0x427F             RSBS     R7,R7,#+0
   \   000000A4   0x202D             MOVS     R0,#+45
   \   000000A6   0x.... 0x....      BL       putc
    133                              xtoa((unsigned long)n, dv);
   \                     ??OLED_Printf_11:
   \   000000AA   0x....             LDR.N    R1,??DataTable3_6
   \   000000AC   0x0038             MOVS     R0,R7
   \   000000AE   0x.... 0x....      BL       xtoa
    134                              break;
   \   000000B2   0xE7AB             B.N      ??OLED_Printf_0
    135                          case 'x':                       // 16 bit heXadecimal
    136                              i = va_arg(a, int);
   \                     ??OLED_Printf_8:
   \   000000B4   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   000000B8   0x0006             MOVS     R6,R0
   \   000000BA   0xF118 0x0804      ADDS     R8,R8,#+4
    137                              puth(i >> 12);
   \   000000BE   0x1330             ASRS     R0,R6,#+12
   \   000000C0   0x.... 0x....      BL       puth
    138                              puth(i >> 8);
   \   000000C4   0x1230             ASRS     R0,R6,#+8
   \   000000C6   0x.... 0x....      BL       puth
    139                              puth(i >> 4);
   \   000000CA   0x1130             ASRS     R0,R6,#+4
   \   000000CC   0x.... 0x....      BL       puth
    140                              puth(i);
   \   000000D0   0x0030             MOVS     R0,R6
   \   000000D2   0x.... 0x....      BL       puth
    141                              break;
   \   000000D6   0xE799             B.N      ??OLED_Printf_0
    142                          case 0: return;
   \                     ??OLED_Printf_3:
   \   000000D8   0xE004             B.N      ??OLED_Printf_12
    143                          default: goto bad_fmt;
    144                      }
    145                  } else
    146                  {
    147          				bad_fmt:    putc(c);
   \                     ??OLED_Printf_9:
   \                     ??OLED_Printf_2:
   \   000000DA   0x0028             MOVS     R0,R5
   \   000000DC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DE   0x.... 0x....      BL       putc
   \   000000E2   0xE793             B.N      ??OLED_Printf_0
    148          		                
    149                  }
    150              }
    151              va_end(a);
    152          }
   \                     ??OLED_Printf_1:
   \                     ??OLED_Printf_12:
   \   000000E4   0xE8BD 0x01F1      POP      {R0,R4-R8}
   \   000000E8   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     columnIncrementFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     row

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     columnIncrementSmallFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     columnIncrementLargeFont

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     ??hex

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     dv+0x14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     dv

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       40  OLED_Printf
             40 -> putc
             40 -> puth
             40 -> puts
             40 -> xtoa
        0  OLED_PrintfSetColumnRow
       16  putc
             16 -> Fill_RAM_FONT
             16 -> Fill_RAM_FONT_SMALL
        8  puth
              8 -> putc
       24  xtoa
             24 -> putc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
     236  OLED_Printf
      34  OLED_PrintfSetColumnRow
       1  columnIncrementFlag
       1  columnIncrementLargeFont
       1  columnIncrementSmallFont
      40  dv
      16  hex
      84  putc
      18  puth
       1  row
      64  xtoa

 
   4 bytes in section .bss
  56 bytes in section .rodata
 464 bytes in section .text
 
 464 bytes of CODE  memory
  56 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: 1
