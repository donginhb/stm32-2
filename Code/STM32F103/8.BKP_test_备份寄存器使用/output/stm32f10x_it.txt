; generated by ARM C/C++ Compiler with , RVCT4.0 [Build 524] for uVision
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\output\stm32f10x_it.o --depend=.\output\stm32f10x_it.d --device=DARMSTM --apcs=interwork -O3 -I.\ -Id:\Keil\ARM\INC\ST\STM32F10x -D__MICROLIB --omf_browse=.\output\stm32f10x_it.crf stm32f10x_it.c]
                          THUMB

                          AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=1

                  ADC_IRQHandler PROC
;;;372    *******************************************************************************/
;;;373    void ADC_IRQHandler(void)
000000  4770              BX       lr
;;;374    {
;;;375    }
;;;376    
                          ENDP


                          AREA ||i.BusFaultException||, CODE, READONLY, ALIGN=1

                  BusFaultException PROC
;;;81     *******************************************************************************/
;;;82     void BusFaultException(void)
000000  4770              BX       lr
;;;83     {
;;;84     }
;;;85     
                          ENDP


                          AREA ||i.CAN_RX1_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN_RX1_IRQHandler PROC
;;;407    *******************************************************************************/
;;;408    void CAN_RX1_IRQHandler(void)
000000  4770              BX       lr
;;;409    {
;;;410    }
;;;411    
                          ENDP


                          AREA ||i.CAN_SCE_IRQHandler||, CODE, READONLY, ALIGN=1

                  CAN_SCE_IRQHandler PROC
;;;418    *******************************************************************************/
;;;419    void CAN_SCE_IRQHandler(void)
000000  4770              BX       lr
;;;420    {
;;;421    }
;;;422    
                          ENDP


                          AREA ||i.DMAChannel1_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel1_IRQHandler PROC
;;;295    *******************************************************************************/
;;;296    void DMAChannel1_IRQHandler(void)
000000  4770              BX       lr
;;;297    {
;;;298    }
;;;299    
                          ENDP


                          AREA ||i.DMAChannel2_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel2_IRQHandler PROC
;;;306    *******************************************************************************/
;;;307    void DMAChannel2_IRQHandler(void)
000000  4770              BX       lr
;;;308    {
;;;309    }
;;;310    
                          ENDP


                          AREA ||i.DMAChannel3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel3_IRQHandler PROC
;;;317    *******************************************************************************/
;;;318    void DMAChannel3_IRQHandler(void)
000000  4770              BX       lr
;;;319    {
;;;320    }
;;;321    
                          ENDP


                          AREA ||i.DMAChannel4_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel4_IRQHandler PROC
;;;328    *******************************************************************************/
;;;329    void DMAChannel4_IRQHandler(void)
000000  4770              BX       lr
;;;330    {
;;;331    }
;;;332    
                          ENDP


                          AREA ||i.DMAChannel5_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel5_IRQHandler PROC
;;;339    *******************************************************************************/
;;;340    void DMAChannel5_IRQHandler(void)
000000  4770              BX       lr
;;;341    {
;;;342    }
;;;343    
                          ENDP


                          AREA ||i.DMAChannel6_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel6_IRQHandler PROC
;;;350    *******************************************************************************/
;;;351    void DMAChannel6_IRQHandler(void)
000000  4770              BX       lr
;;;352    {
;;;353    }
;;;354    
                          ENDP


                          AREA ||i.DMAChannel7_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMAChannel7_IRQHandler PROC
;;;361    *******************************************************************************/
;;;362    void DMAChannel7_IRQHandler(void)
000000  4770              BX       lr
;;;363    {
;;;364    }
;;;365    
                          ENDP


                          AREA ||i.DebugMonitor||, CODE, READONLY, ALIGN=1

                  DebugMonitor PROC
;;;103    *******************************************************************************/
;;;104    void DebugMonitor(void)
000000  4770              BX       lr
;;;105    {
;;;106    }
;;;107    
                          ENDP


                          AREA ||i.EXTI0_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI0_IRQHandler PROC
;;;240    *******************************************************************************/
;;;241    void EXTI0_IRQHandler(void)
000000  4770              BX       lr
;;;242    {
;;;243    }
;;;244    
                          ENDP


                          AREA ||i.EXTI15_10_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI15_10_IRQHandler PROC
;;;618    *******************************************************************************/
;;;619    void EXTI15_10_IRQHandler(void)
000000  4770              BX       lr
;;;620    {
;;;621    }
;;;622    
                          ENDP


                          AREA ||i.EXTI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI1_IRQHandler PROC
;;;251    *******************************************************************************/
;;;252    void EXTI1_IRQHandler(void)
000000  4770              BX       lr
;;;253    {
;;;254    }
;;;255    
                          ENDP


                          AREA ||i.EXTI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI2_IRQHandler PROC
;;;262    *******************************************************************************/
;;;263    void EXTI2_IRQHandler(void)
000000  4770              BX       lr
;;;264    {
;;;265    }
;;;266    
                          ENDP


                          AREA ||i.EXTI3_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI3_IRQHandler PROC
;;;273    *******************************************************************************/
;;;274    void EXTI3_IRQHandler(void)
000000  4770              BX       lr
;;;275    {
;;;276    }
;;;277    
                          ENDP


                          AREA ||i.EXTI4_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI4_IRQHandler PROC
;;;284    *******************************************************************************/
;;;285    void EXTI4_IRQHandler(void)
000000  4770              BX       lr
;;;286    {
;;;287    }
;;;288    
                          ENDP


                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI9_5_IRQHandler PROC
;;;429    *******************************************************************************/
;;;430    void EXTI9_5_IRQHandler(void)
000000  4770              BX       lr
;;;431    {
;;;432    }
;;;433    
                          ENDP


                          AREA ||i.FLASH_IRQHandler||, CODE, READONLY, ALIGN=1

                  FLASH_IRQHandler PROC
;;;218    *******************************************************************************/
;;;219    void FLASH_IRQHandler(void)
000000  4770              BX       lr
;;;220    {
;;;221    }
;;;222    
                          ENDP


                          AREA ||i.HardFaultException||, CODE, READONLY, ALIGN=1

                  HardFaultException PROC
;;;59     *******************************************************************************/
;;;60     void HardFaultException(void)
000000  4770              BX       lr
;;;61     {
;;;62     }
;;;63     
                          ENDP


                          AREA ||i.I2C1_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_ER_IRQHandler PROC
;;;530    *******************************************************************************/
;;;531    void I2C1_ER_IRQHandler(void)
000000  4770              BX       lr
;;;532    {
;;;533    }
;;;534    
                          ENDP


                          AREA ||i.I2C1_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C1_EV_IRQHandler PROC
;;;519    *******************************************************************************/
;;;520    void I2C1_EV_IRQHandler(void)
000000  4770              BX       lr
;;;521    {
;;;522    }
;;;523    
                          ENDP


                          AREA ||i.I2C2_ER_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_ER_IRQHandler PROC
;;;552    *******************************************************************************/
;;;553    void I2C2_ER_IRQHandler(void)
000000  4770              BX       lr
;;;554    {
;;;555    }
;;;556    
                          ENDP


                          AREA ||i.I2C2_EV_IRQHandler||, CODE, READONLY, ALIGN=1

                  I2C2_EV_IRQHandler PROC
;;;541    *******************************************************************************/
;;;542    void I2C2_EV_IRQHandler(void)
000000  4770              BX       lr
;;;543    {
;;;544    }
;;;545    
                          ENDP


                          AREA ||i.MemManageException||, CODE, READONLY, ALIGN=1

                  MemManageException PROC
;;;70     *******************************************************************************/
;;;71     void MemManageException(void)
000000  4770              BX       lr
;;;72     {
;;;73     }
;;;74     
                          ENDP


                          AREA ||i.NMIException||, CODE, READONLY, ALIGN=1

                  NMIException PROC
;;;48     *******************************************************************************/
;;;49     void NMIException(void)
000000  4770              BX       lr
;;;50     {
;;;51     }
;;;52     
                          ENDP


                          AREA ||i.PVD_IRQHandler||, CODE, READONLY, ALIGN=1

                  PVD_IRQHandler PROC
;;;158    *******************************************************************************/
;;;159    void PVD_IRQHandler(void)
000000  4770              BX       lr
;;;160    {
;;;161    }
;;;162    
                          ENDP


                          AREA ||i.PendSVC||, CODE, READONLY, ALIGN=1

                  PendSVC PROC
;;;125    *******************************************************************************/
;;;126    void PendSVC(void)
000000  4770              BX       lr
;;;127    {
;;;128    }
;;;129    
                          ENDP


                          AREA ||i.RCC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RCC_IRQHandler PROC
;;;229    *******************************************************************************/
;;;230    void RCC_IRQHandler(void)
000000  4770              BX       lr
;;;231    {
;;;232    }
;;;233    
                          ENDP


                          AREA ||i.RTCAlarm_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTCAlarm_IRQHandler PROC
;;;629    *******************************************************************************/
;;;630    void RTCAlarm_IRQHandler(void)
000000  4770              BX       lr
;;;631    {
;;;632    }
;;;633    
                          ENDP


                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=1

                  RTC_IRQHandler PROC
;;;207    *******************************************************************************/
;;;208    void RTC_IRQHandler(void)
000000  4770              BX       lr
;;;209    {
;;;210    }
;;;211    
                          ENDP


                          AREA ||i.SPI1_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI1_IRQHandler PROC
;;;563    *******************************************************************************/
;;;564    void SPI1_IRQHandler(void)
000000  4770              BX       lr
;;;565    {
;;;566    }
;;;567    
                          ENDP


                          AREA ||i.SPI2_IRQHandler||, CODE, READONLY, ALIGN=1

                  SPI2_IRQHandler PROC
;;;574    *******************************************************************************/
;;;575    void SPI2_IRQHandler(void)
000000  4770              BX       lr
;;;576    {
;;;577    }
;;;578    
                          ENDP


                          AREA ||i.SVCHandler||, CODE, READONLY, ALIGN=1

                  SVCHandler PROC
;;;114    *******************************************************************************/
;;;115    void SVCHandler(void)
000000  4770              BX       lr
;;;116    {
;;;117    }
;;;118    
                          ENDP


                          AREA ||i.SysTickHandler||, CODE, READONLY, ALIGN=1

                  SysTickHandler PROC
;;;136    *******************************************************************************/
;;;137    void SysTickHandler(void)
000000  4770              BX       lr
;;;138    {
;;;139    }
;;;140    
                          ENDP


                          AREA ||i.TAMPER_IRQHandler||, CODE, READONLY, ALIGN=2

                  TAMPER_IRQHandler PROC
;;;169    *******************************************************************************/
;;;170    void TAMPER_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;171    {
;;;172      printf("\n\rThe Tamper Key has been pressed.");
000002  a011              ADR      r0,|L37.72|
000004  f7fffffe          BL       __2printf
;;;173      if(BKP_GetITStatus() != RESET)
000008  f7fffffe          BL       BKP_GetITStatus
00000c  2800              CMP      r0,#0
00000e  d01a              BEQ      |L37.70|
;;;174      { /* Tamper detection event occured */
;;;175    
;;;176    
;;;177        /* Check if Backup registers are cleared */
;;;178        if(IsBackupRegReset() == 0)
000010  f7fffffe          BL       IsBackupRegReset
;;;179        {/* OK, Backup registers are reset as expected */
;;;180          /* Turn on led connected to PC.10 */
;;;181          GPIO_WriteBit(GPIOC, GPIO_Pin_8, Bit_SET);
000014  4b15              LDR      r3,|L37.108|
000016  2201              MOVS     r2,#1
000018  b928              CBNZ     r0,|L37.38|
00001a  0211              LSLS     r1,r2,#8
00001c  4618              MOV      r0,r3
00001e  f7fffffe          BL       GPIO_WriteBit
;;;182    	  printf("\nLed_3: on.--------------------DRx have been reset.");
000022  a013              ADR      r0,|L37.112|
000024  e005              B        |L37.50|
                  |L37.38|
;;;183        }
;;;184        else
;;;185        {/* Backup registers are not reset */
;;;186          /* Turn on led connected to PC.11 */
;;;187          GPIO_WriteBit(GPIOC, GPIO_Pin_9, Bit_SET);
000026  f44f7100          MOV      r1,#0x200
00002a  4618              MOV      r0,r3
00002c  f7fffffe          BL       GPIO_WriteBit
;;;188    	  printf("\nLed_4: on.--------------------DRx are not reset.");
000030  a01c              ADR      r0,|L37.164|
                  |L37.50|
000032  f7fffffe          BL       __2printf
;;;189    	  
;;;190        }
;;;191    					 
;;;192    	PrintBackupReg();
000036  f7fffffe          BL       PrintBackupReg
;;;193        /* Clear Tamper pin interrupt pending bit */
;;;194        BKP_ClearITPendingBit();
00003a  f7fffffe          BL       BKP_ClearITPendingBit
;;;195    
;;;196        /* Clear Tamper pin Event(TE) pending flag */
;;;197        BKP_ClearFlag();
00003e  e8bd4010          POP      {r4,lr}
000042  f7ffbffe          B.W      BKP_ClearFlag
                  |L37.70|
;;;198      }
;;;199    }
000046  bd10              POP      {r4,pc}
;;;200    
                          ENDP

                  |L37.72|
000048  0a0d5468652054616d706572204b657920686173206265656e20707265737365642e00        DCB      "\n\rThe Tamper Key has been pressed.",0
00006b  00                DCB      0
                  |L37.108|
                          DCD      0x40011000
                  |L37.112|
000070  0a4c65645f333a206f6e2e2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d4452782068617665206265656e2072657365742e00        DCB      "\nLed_3: on.--------------------DRx have been reset.",0
                  |L37.164|
0000a4  0a4c65645f343a206f6e2e2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d44527820617265206e6f742072657365742e00        DCB      "\nLed_4: on.--------------------DRx are not reset.",0
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.TIM1_BRK_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_BRK_IRQHandler PROC
;;;440    *******************************************************************************/
;;;441    void TIM1_BRK_IRQHandler(void)
000000  4770              BX       lr
;;;442    {
;;;443    }
;;;444    
                          ENDP


                          AREA ||i.TIM1_CC_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_CC_IRQHandler PROC
;;;475    *******************************************************************************/
;;;476    void TIM1_CC_IRQHandler(void)
000000  4770              BX       lr
;;;477    {
;;;478    }
;;;479    
                          ENDP


                          AREA ||i.TIM1_TRG_COM_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_TRG_COM_IRQHandler PROC
;;;464    *******************************************************************************/
;;;465    void TIM1_TRG_COM_IRQHandler(void)
000000  4770              BX       lr
;;;466    {
;;;467    }
;;;468    
                          ENDP


                          AREA ||i.TIM1_UP_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM1_UP_IRQHandler PROC
;;;452    *******************************************************************************/
;;;453    void TIM1_UP_IRQHandler(void)
000000  4770              BX       lr
;;;454    {
;;;455    }
;;;456    
                          ENDP


                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM2_IRQHandler PROC
;;;486    *******************************************************************************/
;;;487    void TIM2_IRQHandler(void)
000000  4770              BX       lr
;;;488    {
;;;489    }
;;;490    
                          ENDP


                          AREA ||i.TIM3_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM3_IRQHandler PROC
;;;497    *******************************************************************************/
;;;498    void TIM3_IRQHandler(void)
000000  4770              BX       lr
;;;499    {
;;;500    }
;;;501    
                          ENDP


                          AREA ||i.TIM4_IRQHandler||, CODE, READONLY, ALIGN=1

                  TIM4_IRQHandler PROC
;;;508    *******************************************************************************/
;;;509    void TIM4_IRQHandler(void)
000000  4770              BX       lr
;;;510    {
;;;511    }
;;;512    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART1_IRQHandler PROC
;;;585    *******************************************************************************/
;;;586    void USART1_IRQHandler(void)
000000  4770              BX       lr
;;;587    {
;;;588    }
;;;589    
                          ENDP


                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART2_IRQHandler PROC
;;;596    *******************************************************************************/
;;;597    void USART2_IRQHandler(void)
000000  4770              BX       lr
;;;598    {
;;;599    }
;;;600    
                          ENDP


                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=1

                  USART3_IRQHandler PROC
;;;607    *******************************************************************************/
;;;608    void USART3_IRQHandler(void)
000000  4770              BX       lr
;;;609    {
;;;610    }
;;;611    
                          ENDP


                          AREA ||i.USBWakeUp_IRQHandler||, CODE, READONLY, ALIGN=1

                  USBWakeUp_IRQHandler PROC
;;;640    *******************************************************************************/
;;;641    void USBWakeUp_IRQHandler(void)
000000  4770              BX       lr
;;;642    {
;;;643    }
;;;644    
                          ENDP


                          AREA ||i.USB_HP_CAN_TX_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_HP_CAN_TX_IRQHandler PROC
;;;384    *******************************************************************************/
;;;385    void USB_HP_CAN_TX_IRQHandler(void)
000000  4770              BX       lr
;;;386    {
;;;387    }
;;;388    
                          ENDP


                          AREA ||i.USB_LP_CAN_RX0_IRQHandler||, CODE, READONLY, ALIGN=1

                  USB_LP_CAN_RX0_IRQHandler PROC
;;;396    *******************************************************************************/
;;;397    void USB_LP_CAN_RX0_IRQHandler(void)
000000  4770              BX       lr
;;;398    {
;;;399    }
;;;400    
                          ENDP


                          AREA ||i.UsageFaultException||, CODE, READONLY, ALIGN=1

                  UsageFaultException PROC
;;;92     *******************************************************************************/
;;;93     void UsageFaultException(void)
000000  4770              BX       lr
;;;94     {
;;;95     }
;;;96     
                          ENDP


                          AREA ||i.WWDG_IRQHandler||, CODE, READONLY, ALIGN=1

                  WWDG_IRQHandler PROC
;;;147    *******************************************************************************/
;;;148    void WWDG_IRQHandler(void)
000000  4770              BX       lr
;;;149    {
;;;150    }
;;;151    
                          ENDP

