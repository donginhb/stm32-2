###############################################################################
#                                                                             #
#                                                       26/Jun/2014  09:42:04 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\src\common\startup.c                              #
#    Command line =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\src\common\startup.c -D IAR -D TWR_K60N512 -lCN   #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List\    #
#                    -lB C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60 #
#                    _4WIRE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List #
#                    \ -o C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\Obj #
#                    \ --no_cse --no_unroll --no_inline --no_code_motion      #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\projects\hello #
#                    _world\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀ #
#                    ý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\com #
#                    mon\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì #
#                    \K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\cpu\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_ #
#                    4WIRE_SPI\build\iar\hello_world\..\..\..\src\cpu\headers #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\a #
#                    dc16\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³ #
#                    Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drive #
#                    rs\enet\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐò #
#                    Àý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\dr #
#                    ivers\pmc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³Ì #
#                    ÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\ #
#                    drivers\rtc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\ #
#                    ³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\sr #
#                    c\drivers\lptmr\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140 #
#                    509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\. #
#                    .\src\drivers\uart\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ- #
#                    140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\. #
#                    .\..\src\drivers\mcg\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁ #
#                    Ï-140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\.. #
#                    \..\..\src\drivers\wdog\ -I                              #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\platforms\ -I  #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\drivers\ftm\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_ #
#                    4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\SPI #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\O #
#                    LED\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì #
#                    \K60_4WIRE_SPI\build\iar\hello_world\..\ -Ol             #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List\sta #
#                    rtup.lst                                                 #
#    Object file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\Obj\star #
#                    tup.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\src\common\startup.c
      1          /*
      2           * File:    startup.c
      3           * Purpose: Generic Kinetis startup code
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          #if (defined(IAR))
     11          	#pragma section = ".data"
     12          	#pragma section = ".data_init"
     13          	#pragma section = ".bss"
     14          	#pragma section = "CodeRelocate"
     15          	#pragma section = "CodeRelocateRam"
     16          #endif
     17          
     18          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     19          void
     20          common_startup(void)
     21          {
   \                     common_startup:
   \   00000000   0xB580             PUSH     {R7,LR}
     22          
     23          #if (defined(CW))	
     24              extern char __START_BSS[];
     25              extern char __END_BSS[];
     26              extern uint32 __DATA_ROM[];
     27              extern uint32 __DATA_RAM[];
     28              extern char __DATA_END[];
     29          #endif
     30          
     31              /* Declare a counter we'll use in all of the copy loops */
     32              uint32 n;
     33          
     34              /* Declare pointers for various data sections. These pointers
     35               * are initialized using values pulled in from the linker file
     36               */
     37              uint8 * data_ram, * data_rom, * data_rom_end;
     38              uint8 * bss_start, * bss_end;
     39          
     40          
     41              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
     42              extern uint32 __VECTOR_TABLE[];
     43              extern uint32 __VECTOR_RAM[];
     44          
     45              /* Copy the vector table to RAM */
     46              if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000002   0x481C             LDR.N    R0,??common_startup_0
   \   00000004   0x491C             LDR.N    R1,??common_startup_0+0x4
   \   00000006   0x4288             CMP      R0,R1
   \   00000008   0xD00B             BEQ.N    ??common_startup_1
     47              {
     48                  for (n = 0; n < 0x410; n++)
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE006             B.N      ??common_startup_2
     49                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \                     ??common_startup_3:
   \   0000000E   0x4919             LDR.N    R1,??common_startup_0
   \   00000010   0x4A19             LDR.N    R2,??common_startup_0+0x4
   \   00000012   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000016   0xF841 0x2020      STR      R2,[R1, R0, LSL #+2]
   \   0000001A   0x1C40             ADDS     R0,R0,#+1
   \                     ??common_startup_2:
   \   0000001C   0xF5B0 0x6F82      CMP      R0,#+1040
   \   00000020   0xD3F5             BCC.N    ??common_startup_3
     50              }
     51              /* Point the VTOR to the new copy of the vector table */
     52              write_vtor((uint32)__VECTOR_RAM);
   \                     ??common_startup_1:
   \   00000022   0x4814             LDR.N    R0,??common_startup_0
   \   00000024   0x.... 0x....      BL       write_vtor
     53          
     54              /* Get the addresses for the .data section (initialized data section) */
     55          	#if (defined(CW))
     56                  data_ram = (uint8 *)__DATA_RAM;
     57          	    data_rom = (uint8 *)__DATA_ROM;
     58          	    data_rom_end  = (uint8 *)__DATA_END; /* This is actually a RAM address in CodeWarrior */
     59          	    n = data_rom_end - data_ram;
     60              #elif (defined(IAR))
     61          		data_ram = __section_begin(".data");
   \   00000028   0x4914             LDR.N    R1,??common_startup_0+0x8
     62          		data_rom = __section_begin(".data_init");
   \   0000002A   0x4A15             LDR.N    R2,??common_startup_0+0xC
     63          		data_rom_end = __section_end(".data_init");
   \   0000002C   0x4815             LDR.N    R0,??common_startup_0+0x10
     64          		n = data_rom_end - data_rom;
   \   0000002E   0x1A80             SUBS     R0,R0,R2
   \   00000030   0xE003             B.N      ??common_startup_4
     65          	#endif		
     66          		
     67          	/* Copy initialized data from ROM to RAM */
     68          	while (n--)
     69          		*data_ram++ = *data_rom++;
   \                     ??common_startup_5:
   \   00000032   0x7813             LDRB     R3,[R2, #+0]
   \   00000034   0x700B             STRB     R3,[R1, #+0]
   \   00000036   0x1C52             ADDS     R2,R2,#+1
   \   00000038   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_4:
   \   0000003A   0x0003             MOVS     R3,R0
   \   0000003C   0x1E58             SUBS     R0,R3,#+1
   \   0000003E   0x2B00             CMP      R3,#+0
   \   00000040   0xD1F7             BNE.N    ??common_startup_5
     70          	
     71          	
     72              /* Get the addresses for the .bss section (zero-initialized data) */
     73          	#if (defined(CW))
     74          		bss_start = (uint8 *)__START_BSS;
     75          		bss_end = (uint8 *)__END_BSS;
     76          	#elif (defined(IAR))
     77          		bss_start = __section_begin(".bss");
   \   00000042   0x4911             LDR.N    R1,??common_startup_0+0x14
     78          		bss_end = __section_end(".bss");
   \   00000044   0x4811             LDR.N    R0,??common_startup_0+0x18
     79          	#endif
     80          		
     81          		
     82          	
     83          
     84              /* Clear the zero-initialized data section */
     85              n = bss_end - bss_start;
   \   00000046   0x1A40             SUBS     R0,R0,R1
   \   00000048   0xE002             B.N      ??common_startup_6
     86              while(n--)
     87                *bss_start++ = 0;
   \                     ??common_startup_7:
   \   0000004A   0x2200             MOVS     R2,#+0
   \   0000004C   0x700A             STRB     R2,[R1, #+0]
   \   0000004E   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_6:
   \   00000050   0x0002             MOVS     R2,R0
   \   00000052   0x1E50             SUBS     R0,R2,#+1
   \   00000054   0x2A00             CMP      R2,#+0
   \   00000056   0xD1F8             BNE.N    ??common_startup_7
     88          
     89          	/* Get addresses for any code sections that need to be copied from ROM to RAM.
     90          	 * The IAR tools have a predefined keyword that can be used to mark individual
     91          	 * functions for execution from RAM. Add "__ramfunc" before the return type in
     92          	 * the function prototype for any routines you need to execute from RAM instead
     93          	 * of ROM. ex: __ramfunc void foo(void);
     94          	 */
     95          	#if (defined(IAR))
     96          		uint8* code_relocate_ram = __section_begin("CodeRelocateRam");
   \   00000058   0x490D             LDR.N    R1,??common_startup_0+0x1C
     97          		uint8* code_relocate = __section_begin("CodeRelocate");
   \   0000005A   0x4A0E             LDR.N    R2,??common_startup_0+0x20
     98          		uint8* code_relocate_end = __section_end("CodeRelocate");
   \   0000005C   0x480E             LDR.N    R0,??common_startup_0+0x24
     99          
    100          		/* Copy functions from ROM to RAM */
    101          		n = code_relocate_end - code_relocate;
   \   0000005E   0x1A80             SUBS     R0,R0,R2
   \   00000060   0xE003             B.N      ??common_startup_8
    102          		while (n--)
    103          			*code_relocate_ram++ = *code_relocate++;
   \                     ??common_startup_9:
   \   00000062   0x7813             LDRB     R3,[R2, #+0]
   \   00000064   0x700B             STRB     R3,[R1, #+0]
   \   00000066   0x1C52             ADDS     R2,R2,#+1
   \   00000068   0x1C49             ADDS     R1,R1,#+1
   \                     ??common_startup_8:
   \   0000006A   0x0003             MOVS     R3,R0
   \   0000006C   0x1E58             SUBS     R0,R3,#+1
   \   0000006E   0x2B00             CMP      R3,#+0
   \   00000070   0xD1F7             BNE.N    ??common_startup_9
    104          	#endif
    105          }
   \   00000072   0xBD01             POP      {R0,PC}          ;; return
   \                     ??common_startup_0:
   \   00000074   0x........         DC32     __VECTOR_RAM
   \   00000078   0x........         DC32     __VECTOR_TABLE
   \   0000007C   0x........         DC32     SFB(`.data`)
   \   00000080   0x........         DC32     SFB(`.data_init`)
   \   00000084   0x........         DC32     SFE(`.data_init`)
   \   00000088   0x........         DC32     SFB(`.bss`)
   \   0000008C   0x........         DC32     SFE(`.bss`)
   \   00000090   0x........         DC32     SFB(CodeRelocateRam)
   \   00000094   0x........         DC32     SFB(CodeRelocate)
   \   00000098   0x........         DC32     SFE(CodeRelocate)
    106          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  common_startup
             8 -> write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     156  common_startup

 
 156 bytes in section .text
 
 156 bytes of CODE memory

Errors: none
Warnings: none
