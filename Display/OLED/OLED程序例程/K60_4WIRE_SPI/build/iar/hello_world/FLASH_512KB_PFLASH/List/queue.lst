###############################################################################
#                                                                             #
#                                                       26/Jun/2014  09:42:03 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\src\common\queue.c                                #
#    Command line =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\src\common\queue.c -D IAR -D TWR_K60N512 -lCN     #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List\    #
#                    -lB C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60 #
#                    _4WIRE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List #
#                    \ -o C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\Obj #
#                    \ --no_cse --no_unroll --no_inline --no_code_motion      #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.0                           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\projects\hello #
#                    _world\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀ #
#                    ý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\com #
#                    mon\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì #
#                    \K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\cpu\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_ #
#                    4WIRE_SPI\build\iar\hello_world\..\..\..\src\cpu\headers #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\a #
#                    dc16\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³ #
#                    Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drive #
#                    rs\enet\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐò #
#                    Àý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\dr #
#                    ivers\pmc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³Ì #
#                    ÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\src\ #
#                    drivers\rtc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\ #
#                    ³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\..\sr #
#                    c\drivers\lptmr\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140 #
#                    509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\..\. #
#                    .\src\drivers\uart\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ- #
#                    140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\..\. #
#                    .\..\src\drivers\mcg\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁ #
#                    Ï-140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\build\iar\hello_world\.. #
#                    \..\..\src\drivers\wdog\ -I                              #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\platforms\ -I  #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\..\..\..\src\drivers\ftm\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_ #
#                    4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\SPI #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K6 #
#                    0_4WIRE_SPI\build\iar\hello_world\..\..\..\src\drivers\O #
#                    LED\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì #
#                    \K60_4WIRE_SPI\build\iar\hello_world\..\ -Ol             #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\List\que #
#                    ue.lst                                                   #
#    Object file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WI #
#                    RE_SPI\build\iar\hello_world\FLASH_512KB_PFLASH\Obj\queu #
#                    e.o                                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ-140509\³ÌÐòÀý³Ì\K60_4WIRE_SPI\src\common\queue.c
      1          /*
      2           * File:    queue.c
      3           * Purpose: Implement a first in, first out linked list
      4           *
      5           * Notes:   
      6           */
      7          
      8          #include "common.h"
      9          #include "queue.h"
     10          
     11          /********************************************************************/
     12          /* 
     13           * Initialize the specified queue to an empty state
     14           * 
     15           * Parameters:
     16           *  q   Pointer to queue structure
     17           */

   \                                 In section .text, align 2, keep-with-next
     18          void
     19          queue_init(QUEUE *q)
     20          {
     21              q->head = NULL;
   \                     queue_init:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x6001             STR      R1,[R0, #+0]
     22          }
   \   00000004   0x4770             BX       LR               ;; return
     23          /********************************************************************/
     24          /* 
     25           * Check for an empty queue
     26           *
     27           * Parameters:
     28           *  q       Pointer to queue structure
     29           * 
     30           * Return Value:
     31           *  1 if Queue is empty
     32           *  0 otherwise
     33           */

   \                                 In section .text, align 2, keep-with-next
     34          int
     35          queue_isempty(QUEUE *q)
     36          {
     37              return (q->head == NULL);
   \                     queue_isempty:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xD101             BNE.N    ??queue_isempty_0
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xE000             B.N      ??queue_isempty_1
   \                     ??queue_isempty_0:
   \   0000000A   0x2000             MOVS     R0,#+0
   \                     ??queue_isempty_1:
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x4770             BX       LR               ;; return
     38          }
     39          /********************************************************************/
     40          /* 
     41           * Add an item to the end of the queue 
     42           *
     43           * Parameters:
     44           *  q       Pointer to queue structure
     45           *  node    New node to add to the queue
     46           */

   \                                 In section .text, align 2, keep-with-next
     47          void
     48          queue_add(QUEUE *q, QNODE *node)
     49          {
   \                     queue_add:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
     50              if (queue_isempty(q))
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x.... 0x....      BL       queue_isempty
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD002             BEQ.N    ??queue_add_0
     51              {
     52                  q->head = q->tail = node;
   \   00000010   0x6065             STR      R5,[R4, #+4]
   \   00000012   0x6025             STR      R5,[R4, #+0]
   \   00000014   0xE002             B.N      ??queue_add_1
     53              }
     54              else
     55              {
     56                  q->tail->next = node;
   \                     ??queue_add_0:
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x6005             STR      R5,[R0, #+0]
     57                  q->tail = node;
   \   0000001A   0x6065             STR      R5,[R4, #+4]
     58              }
     59              
     60              node->next = NULL;
   \                     ??queue_add_1:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x6028             STR      R0,[R5, #+0]
     61          }
   \   00000020   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     62          
     63          /********************************************************************/
     64          /* 
     65           * Remove and return first (oldest) entry from the specified queue 
     66           *
     67           * Parameters:
     68           *  q       Pointer to queue structure
     69           *
     70           * Return Value:
     71           *  Node at head of queue - NULL if queue is empty
     72           */

   \                                 In section .text, align 2, keep-with-next
     73          QNODE*
     74          queue_remove(QUEUE *q)
     75          {
   \                     queue_remove:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     76              QNODE *oldest;
     77              
     78              if (queue_isempty(q))
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       queue_isempty
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??queue_remove_0
     79                  return NULL;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE002             B.N      ??queue_remove_1
     80              
     81              oldest = q->head;
   \                     ??queue_remove_0:
   \   00000012   0x6820             LDR      R0,[R4, #+0]
     82              q->head = oldest->next;
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x6021             STR      R1,[R4, #+0]
     83              return oldest;
   \                     ??queue_remove_1:
   \   00000018   0xBD10             POP      {R4,PC}          ;; return
     84          }
     85          /********************************************************************/
     86          /* 
     87           * Peek into the queue and return pointer to first (oldest) entry.
     88           * The queue is not modified
     89           *
     90           * Parameters:
     91           *  q       Pointer to queue structure
     92           *
     93           * Return Value:
     94           *  Node at head of queue - NULL if queue is empty
     95           */

   \                                 In section .text, align 2, keep-with-next
     96          QNODE*
     97          queue_peek(QUEUE *q)
     98          {
     99              return q->head;
   \                     queue_peek:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x4770             BX       LR               ;; return
    100          }
    101          /********************************************************************/
    102          /* 
    103           * Move entire contents of one queue to the other
    104           *
    105           * Parameters:
    106           *  src     Pointer to source queue
    107           *  dst     Pointer to destination queue
    108           */

   \                                 In section .text, align 2, keep-with-next
    109          void
    110          queue_move(QUEUE *dst, QUEUE *src)
    111          {
   \                     queue_move:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    112              if (queue_isempty(src))
   \   00000006   0x0028             MOVS     R0,R5
   \   00000008   0x.... 0x....      BL       queue_isempty
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD10E             BNE.N    ??queue_move_0
    113                  return;
    114              
    115              if (queue_isempty(dst))
   \                     ??queue_move_1:
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       queue_isempty
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD002             BEQ.N    ??queue_move_2
    116                  dst->head = src->head;
   \   0000001A   0x6828             LDR      R0,[R5, #+0]
   \   0000001C   0x6020             STR      R0,[R4, #+0]
   \   0000001E   0xE002             B.N      ??queue_move_3
    117              else
    118                  dst->tail->next = src->head;
   \                     ??queue_move_2:
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x6829             LDR      R1,[R5, #+0]
   \   00000024   0x6001             STR      R1,[R0, #+0]
    119          
    120              dst->tail = src->tail;
   \                     ??queue_move_3:
   \   00000026   0x6868             LDR      R0,[R5, #+4]
   \   00000028   0x6060             STR      R0,[R4, #+4]
    121              src->head = NULL;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x6028             STR      R0,[R5, #+0]
    122              return;
   \                     ??queue_move_0:
   \   0000002E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    123          }
    124          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  queue_add
             16 -> queue_isempty
        0  queue_init
        0  queue_isempty
       16  queue_move
             16 -> queue_isempty
        0  queue_peek
        8  queue_remove
              8 -> queue_isempty


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      34  queue_add
       6  queue_init
      16  queue_isempty
      48  queue_move
       4  queue_peek
      26  queue_remove

 
 134 bytes in section .text
 
 134 bytes of CODE memory

Errors: none
Warnings: none
