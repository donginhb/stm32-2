###############################################################################
#                                                                             #
#                                                       07/May/2014  16:39:04 #
# IAR ANSI C/C++ Compiler V6.30.6.23336/W32 EVALUATION for ARM                #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\common\startup.c                              #
#    Command line =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\src\common\startup.c -D IAR -D TWR_K60N512 -lCN   #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\ -lB         #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\ -o          #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\ --no_cse     #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M4 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench 6.0           #
#                    Evaluation\arm\INC\c\DLib_Config_Normal.h" -I            #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\projects\hello #
#                    _world\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kin #
#                    etisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\com #
#                    mon\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\cpu\headers #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\a #
#                    dc16\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kinet #
#                    isK60_Demo_OLED\build\iar\hello_world\..\..\..\src\drive #
#                    rs\enet\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Ki #
#                    netisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\dr #
#                    ivers\pmc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\ #
#                    KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\src\ #
#                    drivers\rtc\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³ #
#                    Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\..\sr #
#                    c\drivers\lptmr\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐ #
#                    òÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\..\. #
#                    .\src\drivers\uart\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\ #
#                    ³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\..\. #
#                    .\..\src\drivers\mcg\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁ #
#                    Ï\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\build\iar\hello_world\.. #
#                    \..\..\src\drivers\wdog\ -I                              #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\platforms\ -I  #
#                    C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\..\..\..\src\drivers\ftm\   #
#                    -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_ #
#                    Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\SPI #
#                    \ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK6 #
#                    0_Demo_OLED\build\iar\hello_world\..\..\..\src\drivers\O #
#                    LED\ -I C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\Kineti #
#                    sK60_Demo_OLED\build\iar\hello_world\..\ -On             #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\List\startup.lst  #
#    Object file  =  C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Dem #
#                    o_OLED\build\iar\hello_world\RAM_128KB\Obj\startup.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\me\Desktop\OLED¿Í»§×ÊÁÏ\³ÌÐòÀý³Ì\KinetisK60_Demo_OLED\src\common\startup.c
      1          /*
      2           * File:    startup.c
      3           * Purpose: Generic Kinetis startup code
      4           *
      5           * Notes:
      6           */
      7          
      8          #include "common.h"
      9          
     10          #if (defined(IAR))
     11          	#pragma section = ".data"
     12          	#pragma section = ".data_init"
     13          	#pragma section = ".bss"
     14          	#pragma section = "CodeRelocate"
     15          	#pragma section = "CodeRelocateRam"
     16          #endif
     17          
     18          /********************************************************************/

   \                                 In section .text, align 4, keep-with-next
     19          void
     20          common_startup(void)
     21          {
   \                     common_startup:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
     22          
     23          #if (defined(CW))	
     24              extern char __START_BSS[];
     25              extern char __END_BSS[];
     26              extern uint32 __DATA_ROM[];
     27              extern uint32 __DATA_RAM[];
     28              extern char __DATA_END[];
     29          #endif
     30          
     31              /* Declare a counter we'll use in all of the copy loops */
     32              uint32 n;
     33          
     34              /* Declare pointers for various data sections. These pointers
     35               * are initialized using values pulled in from the linker file
     36               */
     37              uint8 * data_ram, * data_rom, * data_rom_end;
     38              uint8 * bss_start, * bss_end;
     39          
     40          
     41              /* Addresses for VECTOR_TABLE and VECTOR_RAM come from the linker file */
     42              extern uint32 __VECTOR_TABLE[];
     43              extern uint32 __VECTOR_RAM[];
     44          
     45              /* Copy the vector table to RAM */
     46              if (__VECTOR_RAM != __VECTOR_TABLE)
   \   00000004   0x4824             LDR.N    R0,??common_startup_0
   \   00000006   0x4925             LDR.N    R1,??common_startup_0+0x4
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD00D             BEQ.N    ??common_startup_1
     47              {
     48                  for (n = 0; n < 0x410; n++)
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x4680             MOV      R8,R0
   \                     ??common_startup_2:
   \   00000010   0xF5B8 0x6F82      CMP      R8,#+1040
   \   00000014   0xD208             BCS.N    ??common_startup_1
     49                      __VECTOR_RAM[n] = __VECTOR_TABLE[n];
   \   00000016   0x4820             LDR.N    R0,??common_startup_0
   \   00000018   0x4920             LDR.N    R1,??common_startup_0+0x4
   \   0000001A   0xF851 0x1028      LDR      R1,[R1, R8, LSL #+2]
   \   0000001E   0xF840 0x1028      STR      R1,[R0, R8, LSL #+2]
   \   00000022   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000026   0xE7F3             B.N      ??common_startup_2
     50              }
     51              /* Point the VTOR to the new copy of the vector table */
     52              write_vtor((uint32)__VECTOR_RAM);
   \                     ??common_startup_1:
   \   00000028   0x481B             LDR.N    R0,??common_startup_0
   \   0000002A   0x.... 0x....      BL       write_vtor
     53          
     54              /* Get the addresses for the .data section (initialized data section) */
     55          	#if (defined(CW))
     56                  data_ram = (uint8 *)__DATA_RAM;
     57          	    data_rom = (uint8 *)__DATA_ROM;
     58          	    data_rom_end  = (uint8 *)__DATA_END; /* This is actually a RAM address in CodeWarrior */
     59          	    n = data_rom_end - data_ram;
     60              #elif (defined(IAR))
     61          		data_ram = __section_begin(".data");
   \   0000002E   0x481C             LDR.N    R0,??common_startup_0+0x8
   \   00000030   0x0007             MOVS     R7,R0
     62          		data_rom = __section_begin(".data_init");
   \   00000032   0x481C             LDR.N    R0,??common_startup_0+0xC
   \   00000034   0x0006             MOVS     R6,R0
     63          		data_rom_end = __section_end(".data_init");
   \   00000036   0x481C             LDR.N    R0,??common_startup_0+0x10
   \   00000038   0x0004             MOVS     R4,R0
     64          		n = data_rom_end - data_rom;
   \   0000003A   0x1BA0             SUBS     R0,R4,R6
   \   0000003C   0x4680             MOV      R8,R0
     65          	#endif		
     66          		
     67          	/* Copy initialized data from ROM to RAM */
     68          	while (n--)
   \                     ??common_startup_3:
   \   0000003E   0x4640             MOV      R0,R8
   \   00000040   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD004             BEQ.N    ??common_startup_4
     69          		*data_ram++ = *data_rom++;
   \   00000048   0x7830             LDRB     R0,[R6, #+0]
   \   0000004A   0x7038             STRB     R0,[R7, #+0]
   \   0000004C   0x1C76             ADDS     R6,R6,#+1
   \   0000004E   0x1C7F             ADDS     R7,R7,#+1
   \   00000050   0xE7F5             B.N      ??common_startup_3
     70          	
     71          	
     72              /* Get the addresses for the .bss section (zero-initialized data) */
     73          	#if (defined(CW))
     74          		bss_start = (uint8 *)__START_BSS;
     75          		bss_end = (uint8 *)__END_BSS;
     76          	#elif (defined(IAR))
     77          		bss_start = __section_begin(".bss");
   \                     ??common_startup_4:
   \   00000052   0x4816             LDR.N    R0,??common_startup_0+0x14
   \   00000054   0x4681             MOV      R9,R0
     78          		bss_end = __section_end(".bss");
   \   00000056   0x4816             LDR.N    R0,??common_startup_0+0x18
   \   00000058   0x0005             MOVS     R5,R0
     79          	#endif
     80          		
     81          		
     82          	
     83          
     84              /* Clear the zero-initialized data section */
     85              n = bss_end - bss_start;
   \   0000005A   0xEBB5 0x0009      SUBS     R0,R5,R9
   \   0000005E   0x4680             MOV      R8,R0
     86              while(n--)
   \                     ??common_startup_5:
   \   00000060   0x4640             MOV      R0,R8
   \   00000062   0xF1B0 0x0801      SUBS     R8,R0,#+1
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD005             BEQ.N    ??common_startup_6
     87                *bss_start++ = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0xF889 0x0000      STRB     R0,[R9, #+0]
   \   00000070   0xF119 0x0901      ADDS     R9,R9,#+1
   \   00000074   0xE7F4             B.N      ??common_startup_5
     88          
     89          	/* Get addresses for any code sections that need to be copied from ROM to RAM.
     90          	 * The IAR tools have a predefined keyword that can be used to mark individual
     91          	 * functions for execution from RAM. Add "__ramfunc" before the return type in
     92          	 * the function prototype for any routines you need to execute from RAM instead
     93          	 * of ROM. ex: __ramfunc void foo(void);
     94          	 */
     95          	#if (defined(IAR))
     96          		uint8* code_relocate_ram = __section_begin("CodeRelocateRam");
   \                     ??common_startup_6:
   \   00000076   0x480F             LDR.N    R0,??common_startup_0+0x1C
     97          		uint8* code_relocate = __section_begin("CodeRelocate");
   \   00000078   0x490F             LDR.N    R1,??common_startup_0+0x20
     98          		uint8* code_relocate_end = __section_end("CodeRelocate");
   \   0000007A   0x4A10             LDR.N    R2,??common_startup_0+0x24
     99          
    100          		/* Copy functions from ROM to RAM */
    101          		n = code_relocate_end - code_relocate;
   \   0000007C   0x1A53             SUBS     R3,R2,R1
   \   0000007E   0x4698             MOV      R8,R3
    102          		while (n--)
   \                     ??common_startup_7:
   \   00000080   0x4643             MOV      R3,R8
   \   00000082   0xF1B3 0x0801      SUBS     R8,R3,#+1
   \   00000086   0x2B00             CMP      R3,#+0
   \   00000088   0xD004             BEQ.N    ??common_startup_8
    103          			*code_relocate_ram++ = *code_relocate++;
   \   0000008A   0x780B             LDRB     R3,[R1, #+0]
   \   0000008C   0x7003             STRB     R3,[R0, #+0]
   \   0000008E   0x1C49             ADDS     R1,R1,#+1
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0xE7F5             B.N      ??common_startup_7
    104          	#endif
    105          }
   \                     ??common_startup_8:
   \   00000094   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   \                     ??common_startup_0:
   \   00000098   0x........         DC32     __VECTOR_RAM
   \   0000009C   0x........         DC32     __VECTOR_TABLE
   \   000000A0   0x........         DC32     SFB(`.data`)
   \   000000A4   0x........         DC32     SFB(`.data_init`)
   \   000000A8   0x........         DC32     SFE(`.data_init`)
   \   000000AC   0x........         DC32     SFB(`.bss`)
   \   000000B0   0x........         DC32     SFE(`.bss`)
   \   000000B4   0x........         DC32     SFB(CodeRelocateRam)
   \   000000B8   0x........         DC32     SFB(CodeRelocate)
   \   000000BC   0x........         DC32     SFE(CodeRelocate)
    106          /********************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       32  common_startup
             32 -> write_vtor


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     192  common_startup

 
 192 bytes in section .text
 
 192 bytes of CODE memory

Errors: none
Warnings: none
